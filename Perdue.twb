<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20214.22.0420.0834                               -->
<workbook original-version='18.1' source-build='2021.4.6 (20214.22.0420.0834)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.RelationshipCalculations.true...RelationshipCalculations />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Delivery Cost (Perdue)' inline='true' name='federated.17b4hfc1jqatiu14kdrf716mek5o' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Perdue' name='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/chase/OneDrive/Desktop/Projects/Perdue/Perdue.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6' name='Delivery Cost' table='[&apos;Delivery Cost$&apos;]' type='table'>
          <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='2'>
            <column datatype='string' name='Gen3,Shipment Number' ordinal='0' />
            <column datatype='string' name='Customer' ordinal='1' />
            <column datatype='string' name='Gen5,Location' ordinal='2' />
            <column datatype='real' name='Pounds Shipped' ordinal='3' />
            <column datatype='real' name='Direct Load Cost' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6' name='Delivery Cost' table='[&apos;Delivery Cost$&apos;]' type='table'>
            <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='2'>
              <column datatype='string' name='Gen3,Shipment Number' ordinal='0' />
              <column datatype='string' name='Customer' ordinal='1' />
              <column datatype='string' name='Gen5,Location' ordinal='2' />
              <column datatype='real' name='Pounds Shipped' ordinal='3' />
              <column datatype='real' name='Direct Load Cost' ordinal='4' />
            </columns>
          </relation>
          <relation connection='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6' name='On Time, Held Time' table='[&apos;On Time, Held Time$&apos;]' type='table'>
            <columns gridOrigin='A1:K10001:no:A1:K2147483647:0' header='yes' outcome='2'>
              <column datatype='integer' name='Load #' ordinal='0' />
              <column datatype='string' name='Carrier Name' ordinal='1' />
              <column datatype='integer' name='Sold To' ordinal='2' />
              <column datatype='string' name='Sched Arrive Date' ordinal='3' />
              <column datatype='datetime' name='Sched Arrive Time' ordinal='4' />
              <column datatype='string' name='Actual Arrive Date' ordinal='5' />
              <column datatype='datetime' name='Actual Arrive Time' ordinal='6' />
              <column datatype='string' name='Empty Date' ordinal='7' />
              <column datatype='datetime' name='Empty Time' ordinal='8' />
              <column datatype='string' name='LATE? (Yes/No)' ordinal='9' />
              <column datatype='string' name='HELD' ordinal='10' />
            </columns>
          </relation>
          <relation connection='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6' name='TMS Data' table='[&apos;TMS Data$&apos;]' type='table'>
            <columns gridOrigin='A1:L10001:no:A1:L10001:0' header='yes' outcome='2'>
              <column datatype='integer' name='Shipment Number' ordinal='0' />
              <column datatype='string' name='Carrier Name' ordinal='1' />
              <column datatype='integer' name='Driver #' ordinal='2' />
              <column datatype='string' name='Pickup ID' ordinal='3' />
              <column datatype='string' name='Pickup City' ordinal='4' />
              <column datatype='string' name='Pickup State' ordinal='5' />
              <column datatype='string' name='Pickup Depart Date' ordinal='6' />
              <column datatype='string' name='Pickup Depart Time' ordinal='7' />
              <column datatype='string' name='Dropoff ID' ordinal='8' />
              <column datatype='string' name='Dropoff City' ordinal='9' />
              <column datatype='string' name='Dropoff State' ordinal='10' />
              <column datatype='integer' name='# of Stops' ordinal='11' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[# of Stops]' value='[TMS Data].[# of Stops]' />
          <map key='[Actual Arrive Date]' value='[On Time, Held Time].[Actual Arrive Date]' />
          <map key='[Actual Arrive Time]' value='[On Time, Held Time].[Actual Arrive Time]' />
          <map key='[Carrier Name (TMS Data)]' value='[TMS Data].[Carrier Name]' />
          <map key='[Carrier Name]' value='[On Time, Held Time].[Carrier Name]' />
          <map key='[Customer]' value='[Delivery Cost].[Customer]' />
          <map key='[Direct Load Cost]' value='[Delivery Cost].[Direct Load Cost]' />
          <map key='[Driver #]' value='[TMS Data].[Driver #]' />
          <map key='[Dropoff City]' value='[TMS Data].[Dropoff City]' />
          <map key='[Dropoff ID]' value='[TMS Data].[Dropoff ID]' />
          <map key='[Dropoff State]' value='[TMS Data].[Dropoff State]' />
          <map key='[Empty Date]' value='[On Time, Held Time].[Empty Date]' />
          <map key='[Empty Time]' value='[On Time, Held Time].[Empty Time]' />
          <map key='[Gen3,Shipment Number]' value='[Delivery Cost].[Gen3,Shipment Number]' />
          <map key='[Gen5,Location]' value='[Delivery Cost].[Gen5,Location]' />
          <map key='[HELD]' value='[On Time, Held Time].[HELD]' />
          <map key='[LATE? (Yes/No)]' value='[On Time, Held Time].[LATE? (Yes/No)]' />
          <map key='[Load #]' value='[On Time, Held Time].[Load #]' />
          <map key='[Pickup City]' value='[TMS Data].[Pickup City]' />
          <map key='[Pickup Depart Date]' value='[TMS Data].[Pickup Depart Date]' />
          <map key='[Pickup Depart Time]' value='[TMS Data].[Pickup Depart Time]' />
          <map key='[Pickup ID]' value='[TMS Data].[Pickup ID]' />
          <map key='[Pickup State]' value='[TMS Data].[Pickup State]' />
          <map key='[Pounds Shipped]' value='[Delivery Cost].[Pounds Shipped]' />
          <map key='[Sched Arrive Date]' value='[On Time, Held Time].[Sched Arrive Date]' />
          <map key='[Sched Arrive Time]' value='[On Time, Held Time].[Sched Arrive Time]' />
          <map key='[Shipment Number]' value='[TMS Data].[Shipment Number]' />
          <map key='[Sold To]' value='[On Time, Held Time].[Sold To]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Delivery Cost]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E10001:no:A1:E10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>1</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:K10001:no:A1:K2147483647:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:L10001:no:A1:L10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gen3,Shipment Number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Gen3,Shipment Number]</local-name>
            <parent-name>[Delivery Cost]</parent-name>
            <remote-alias>Gen3,Shipment Number</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer]</local-name>
            <parent-name>[Delivery Cost]</parent-name>
            <remote-alias>Customer</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gen5,Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Gen5,Location]</local-name>
            <parent-name>[Delivery Cost]</parent-name>
            <remote-alias>Gen5,Location</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pounds Shipped</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Pounds Shipped]</local-name>
            <parent-name>[Delivery Cost]</parent-name>
            <remote-alias>Pounds Shipped</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Direct Load Cost</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Direct Load Cost]</local-name>
            <parent-name>[Delivery Cost]</parent-name>
            <remote-alias>Direct Load Cost</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Load #</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Load #]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Load #</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Carrier Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Carrier Name]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Carrier Name</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sold To</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Sold To]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Sold To</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sched Arrive Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sched Arrive Date]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Sched Arrive Date</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sched Arrive Time</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Sched Arrive Time]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Sched Arrive Time</remote-alias>
            <ordinal>9</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Actual Arrive Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Actual Arrive Date]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Actual Arrive Date</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Actual Arrive Time</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Actual Arrive Time]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Actual Arrive Time</remote-alias>
            <ordinal>11</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Empty Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Empty Date]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Empty Date</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Empty Time</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Empty Time]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>Empty Time</remote-alias>
            <ordinal>13</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LATE? (Yes/No)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[LATE? (Yes/No)]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>LATE? (Yes/No)</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HELD</remote-name>
            <remote-type>130</remote-type>
            <local-name>[HELD]</local-name>
            <parent-name>[On Time, Held Time]</parent-name>
            <remote-alias>HELD</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shipment Number</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Shipment Number]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Shipment Number</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Carrier Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Carrier Name (TMS Data)]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Carrier Name</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Driver #</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Driver #]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Driver #</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pickup ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Pickup ID]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Pickup ID</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pickup City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Pickup City]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Pickup City</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pickup State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Pickup State]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Pickup State</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pickup Depart Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Pickup Depart Date]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Pickup Depart Date</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pickup Depart Time</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Pickup Depart Time]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Pickup Depart Time</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dropoff ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Dropoff ID]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Dropoff ID</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dropoff City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Dropoff City]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Dropoff City</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dropoff State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Dropoff State]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias>Dropoff State</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name># of Stops</remote-name>
            <remote-type>20</remote-type>
            <local-name>[# of Stops]</local-name>
            <parent-name>[TMS Data]</parent-name>
            <remote-alias># of Stops</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='HELD?' datatype='boolean' name='[Calculation_1039768597318828033]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Calculation_1197113109266837518]&gt;0' />
      </column>
      <column caption='HELD? TRUE/FALSE' datatype='string' name='[Calculation_1039768597320548355]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_1197113109266837518] &gt; 0&#13;&#10;THEN&#13;&#10;&quot;TRUE&quot;&#13;&#10;END' />
      </column>
      <column caption='DELIVERY COST PER POUND' datatype='real' default-format='C1033%' name='[Calculation_1039768597327163398]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Direct Load Cost]/[Pounds Shipped]' />
      </column>
      <column caption='HELD TIME COST' datatype='integer' default-format='C1033%' name='[Calculation_1039768597327736839]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_1197113109266837518]*65' />
      </column>
      <column caption='HELD TIME COST PER POUND' datatype='real' default-format='C1033%' name='[Calculation_1039768597327884296]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_1039768597327736839]/[Pounds Shipped]' />
      </column>
      <column caption='DRIVER LATE' datatype='boolean' name='[Calculation_1039768597332709386]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30' />
      </column>
      <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
      </column>
      <column caption='Stops Per Load' datatype='integer' name='[Calculation_1062005120701775875]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Load #]:MAX([# of Stops])}' />
      </column>
      <column caption='DROP OFF != PICKUP' datatype='boolean' name='[Calculation_1062005120703623172]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Dropoff State]!=[Pickup State]' />
      </column>
      <column caption='COST OF HELD TIME' datatype='integer' name='[Calculation_1166432337424392192]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Calculation_1197113109266837518])*65' />
      </column>
      <column caption='DROP TRAILER COST' datatype='integer' name='[Calculation_1166432337424883713]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Customer])*25' />
      </column>
      <column caption='DROP TRAILER SAVINGS' datatype='integer' default-format='C1033%' name='[Calculation_1166432337425633282]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_1166432337424392192]-[Calculation_1166432337424883713]' />
      </column>
      <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
      </column>
      <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
      </column>
      <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
      </column>
      <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
      </column>
      <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
      </column>
      <column caption='LATE TIME' datatype='datetime' name='[Calculation_1197113109258592266]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATEADD(&apos;minute&apos;,30,[Calculation_1534320131314319377])' />
      </column>
      <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
      </column>
      <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
      </column>
      <column caption='Shipment Number' datatype='string' name='[Calculation_1534320131277119488]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='RIGHT([Gen3,Shipment Number],7)' />
      </column>
      <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
      </column>
      <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
      </column>
      <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
      <column datatype='string' name='[Dropoff City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Dropoff State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Held' datatype='string' name='[HELD]' role='dimension' type='nominal' />
      <column datatype='string' name='[Pickup City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Pickup State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Shipment Number1' datatype='integer' name='[Shipment Number]' role='dimension' type='ordinal' />
      <_.fcp.ObjectModelTableType.true...column caption='Delivery Cost' datatype='table' name='[__tableau_internal_object_id__].[Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='On Time, Held Time' datatype='table' name='[__tableau_internal_object_id__].[On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='TMS Data' datatype='table' name='[__tableau_internal_object_id__].[TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928]' role='measure' type='quantitative' />
      <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Customer:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;100101&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;100577&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;100637&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;100713&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;100993&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;101250&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;101253&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;101532&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;101934&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;102242&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;102482&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;104206&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;104229&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;105338&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;106175&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;107891&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;109340&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;111289&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;112143&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;114098&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;120105&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;125195&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;126280&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;126443&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;129289&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;129886&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;130076&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;131441&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;132861&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;133245&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;133780&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;134084&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;134460&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;134704&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;136436&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;137136&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;137406&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;137534&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;137712&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;137956&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139128&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139317&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139520&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139547&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139770&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139815&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139932&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;139995&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;100366&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;100753&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;100892&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;102282&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;102585&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;103310&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;103410&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;103643&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;104210&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;105967&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;106542&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;106741&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;107904&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;108730&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;109830&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;109879&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;110704&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;111429&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;112146&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;112260&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;112479&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;113055&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;113229&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;114241&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;114469&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;114562&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;120488&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;120489&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;126078&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;130181&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;130871&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;131346&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;132948&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;134218&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;134718&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;135346&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;135524&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;135641&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;136114&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;136469&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;137067&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;137384&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;138644&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;138752&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;138997&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;139668&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;139817&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;139879&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;100089&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;100207&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;100394&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;100541&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;100551&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;100887&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;101232&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;101830&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;101876&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;101912&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;102181&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;102240&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;102244&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;104199&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;105580&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;105747&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;106197&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;107916&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;110112&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;112117&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;112544&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;112654&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;120051&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;120596&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;121245&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;121325&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;121973&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;125192&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;125193&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;129870&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;131135&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;134163&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;134514&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;134623&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;134798&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;135886&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;136279&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;136364&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;136758&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;137366&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;137808&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;138191&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;138662&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;138816&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;139167&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;139802&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;139900&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;140050&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;100371&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;100393&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;100529&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;101089&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;101160&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;101240&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;101985&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102245&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102251&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102255&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102259&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102278&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102288&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102294&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;102692&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;103255&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;103738&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;104993&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;105707&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;106411&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;107626&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;107918&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;108938&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;110200&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;110444&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;111315&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;112131&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;113020&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;125289&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;130157&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;130547&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;131483&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;134753&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;135107&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;135142&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;135262&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;135365&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;136913&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;137387&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;137933&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;138437&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;138669&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;138694&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;139082&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;139191&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;139246&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;139289&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;100086&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;100178&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;100211&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;100268&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;100775&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;100970&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;101234&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;101425&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;101449&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;101521&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;101778&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;102021&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;102500&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;102626&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;103405&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;103525&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;103597&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;103599&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;104293&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;105267&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;105283&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;108283&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;108677&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;109615&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;112145&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;120619&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;120648&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;125065&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;125196&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;125197&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;126457&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;129230&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;129403&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;129887&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;132978&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;132987&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;133866&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;134048&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;134767&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;134855&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;135828&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;137137&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;137603&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;137841&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;137858&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;138263&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;138275&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;140044&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;100450&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;100543&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;100662&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;100694&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;101024&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;102226&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;102256&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;102261&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;102270&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;102645&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;104838&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;106271&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;106742&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;106933&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;107618&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;110300&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;110636&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;110859&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;112129&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;112130&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;114530&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;121368&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;125057&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;125118&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;125216&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;125267&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;125429&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;125995&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;126235&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;126466&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;129972&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;131411&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;134182&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;134988&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;135123&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;136025&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;136052&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;136547&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;136560&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;137138&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;137312&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;137376&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;137639&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;138536&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;138893&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;139284&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;139908&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;139934&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;100811&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;101159&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;101166&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;101396&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;101406&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;102246&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;102281&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;102290&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;102589&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;103352&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;103829&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;104968&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;106341&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;106441&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;107463&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;107917&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;108637&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;111060&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;112453&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;112653&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;113385&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;114186&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;114778&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;120421&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;121339&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;129288&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;130489&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;131090&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;131399&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;131519&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;133455&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;134135&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;134941&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;135818&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;135960&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;136318&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;136442&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;136559&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;137640&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;137642&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;138266&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;138832&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;138954&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;139550&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;139627&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;139676&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;139827&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;100070&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;101014&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;101067&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;101851&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;101883&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;101987&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;103770&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;104294&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;105307&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;107127&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;107214&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;107511&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;110865&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;112141&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;112668&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;113131&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;113212&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;113489&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;114777&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;120650&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;121047&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;121048&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;121672&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;125127&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;125247&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;129194&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;131126&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;132122&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;132143&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;133177&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;133244&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;133282&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;133968&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;134444&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;134898&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;135356&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;135658&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;136145&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;136341&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;136725&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;137638&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;137796&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;138554&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;138892&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;139756&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;139832&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;139917&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;139965&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;100079&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;100087&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;100108&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;100448&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;100600&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;100999&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;101323&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;101689&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;101864&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;102253&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;102280&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;102568&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;103800&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;104161&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;105072&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;108661&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;109264&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;109776&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;111329&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;112088&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;112142&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;112150&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;113088&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;113506&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;113831&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;114066&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;114639&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;120002&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;120392&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;120423&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;125199&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;128867&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;130031&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;130411&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;131469&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;134217&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;134720&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;135705&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;136262&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;136922&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;138793&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;139301&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;139574&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;139772&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;139787&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;139999&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;140017&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;100372&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;100440&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;100452&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;100992&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;101003&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;101759&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;101890&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;102330&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;102545&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;102633&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;103930&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;107806&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;107903&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;108620&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;109524&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;110289&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;110664&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;111679&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;113815&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;114048&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;114256&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;121957&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;125119&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;125194&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;125268&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;125997&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;126203&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;129294&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;130012&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;130107&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;130869&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;132065&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;134388&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;135143&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;135736&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;135805&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;136383&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;136490&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;136903&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;136950&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;137036&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;137229&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;137426&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;137859&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;139139&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;139696&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;139942&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;139946&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;100065&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;100369&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;101542&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;102271&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;102364&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;102389&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;102467&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;102592&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;103422&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;103608&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;104163&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;105893&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;105932&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;106763&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;108639&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;108936&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;109162&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;110874&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;111316&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;112123&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;112135&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;112148&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;112267&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;112574&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;113845&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;120646&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;121338&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;130228&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;130876&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;131235&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;132980&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;135180&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;135226&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;135456&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;135751&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;136723&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;137043&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;137667&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;137672&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;137971&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;138189&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;138503&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;139148&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;139248&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;139358&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;139622&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;139722&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;100118&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;100628&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;101810&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;102380&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;102388&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;102463&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;102693&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;103466&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;105270&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;105871&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;107213&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;108447&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;108511&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;108648&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;108688&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;109075&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;110304&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;111788&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;112268&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;112428&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;112575&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;114429&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;114569&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;120817&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;121348&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;121494&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;130255&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;130303&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;130984&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;131455&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;133188&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;134854&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;135040&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;135202&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;136652&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;137688&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;137741&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;138787&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;138869&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;138967&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;139298&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;139327&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;139634&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;139693&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;139818&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;139823&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;139876&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;100072&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;100095&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;100266&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;100494&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;100644&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;100735&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;100774&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;101641&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;102237&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;102289&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;103561&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;103616&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;103810&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;106001&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;106173&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;107847&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;108619&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;109449&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;110226&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;112125&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;112458&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;112524&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;113204&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;114185&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;114251&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;121192&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;121265&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;125045&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;125202&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;125217&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;125242&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;130518&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;132846&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;133094&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;133262&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;134257&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;134857&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;135066&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;135348&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;135352&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;135867&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;136024&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;137139&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;138265&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;138953&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;139427&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;139608&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;100303&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;100359&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;100767&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;100889&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;102230&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;102586&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;102602&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;103280&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;104164&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;104190&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;104245&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;107024&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;108716&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;108741&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;109371&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;110179&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;110583&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;110884&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;112133&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;113183&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;113185&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;114749&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;120041&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;120305&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;125124&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;125126&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;125299&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;129272&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;129279&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;129891&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;131324&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;131513&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;133087&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;133089&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;134986&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;135052&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;135264&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;135979&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;136226&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;136677&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;137683&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;138203&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;138956&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;138989&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;139654&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;139757&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;139804&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;100113&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;100885&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;100972&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;101450&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;101564&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;101841&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;101861&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;102060&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;102232&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;102268&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;102479&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;102588&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;103748&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;104234&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;104971&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;105376&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;105857&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;106502&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;109643&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;110040&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;111288&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;111489&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;121709&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;125200&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;125255&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;125473&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;129793&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;129813&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;129888&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;133251&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;133276&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;133886&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;134378&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;134457&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;134557&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;134787&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;134911&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;134980&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;136095&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;136464&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;136843&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;137336&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;138677&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;138708&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;139093&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;139555&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;139777&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;140054&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;100096&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;100496&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;100556&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;101170&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;101176&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;101809&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;101948&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;102123&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;102368&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;103337&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;104810&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;105730&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;105802&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;106599&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;108357&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;109115&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;112147&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;113214&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;113832&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;120652&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;121794&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;121826&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;125125&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;125218&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;125219&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;125270&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;126397&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;129197&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;129869&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;130268&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;130998&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;131134&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;132034&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;133086&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;134376&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;134442&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;135151&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;135308&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;136757&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;136986&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;137182&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;137296&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;137353&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;137528&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;137742&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;137902&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;138809&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;139967&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;100052&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;100078&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;100091&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;100405&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;100789&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;100908&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;101206&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;101216&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;101344&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;101440&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;101808&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;102249&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;103308&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;105102&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;105285&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;106061&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;107651&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;108653&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;109508&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;112434&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;112645&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;113106&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;113395&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;114076&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;120712&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;121171&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;121772&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;125058&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;125994&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;129973&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;130342&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;130689&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;133170&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;133277&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;133599&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;134195&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;134341&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;135526&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;136023&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;136055&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;136434&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;136532&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;136929&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;137773&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;138993&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;139013&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;139767&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;139941&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;100068&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;100106&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;100378&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;101235&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;101259&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;101853&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;102264&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;102292&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;103700&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;105796&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;107446&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;107737&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;108972&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;109070&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;109751&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;109752&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;109952&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;111845&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;112081&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;112959&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;114761&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;121109&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;121831&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;125191&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;125234&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;125246&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;125731&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;130326&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;131482&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;133807&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;133865&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;134412&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;135144&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;135514&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;135523&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;136275&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;138070&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;138665&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139277&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139467&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139664&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139745&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139762&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139801&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139933&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;139963&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;140022&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;100051&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;100193&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;100895&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;101023&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;101428&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;101475&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;101807&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;101953&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;102187&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;102233&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;102243&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;102257&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;102287&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;102570&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;104237&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;104905&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;105073&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;107756&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;107852&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;109884&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;112118&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;112126&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;125201&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;125474&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;125801&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;126236&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;126377&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;129889&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;130156&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;130294&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;131102&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;133272&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;133967&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;134081&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;134294&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;134856&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;135015&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;136057&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;137084&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;137385&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;138264&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;138357&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;138743&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;138790&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;139097&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;139385&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;139637&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;140076&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;100073&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;100102&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;100368&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;100520&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;101246&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;101455&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;101823&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;101882&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;105056&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;105074&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;105140&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;105266&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;105490&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;105616&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;106449&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;107212&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;108581&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;108816&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;110866&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;111501&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;112087&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;113249&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;113273&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;120960&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;121152&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;121784&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;121918&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;124788&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;125059&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;130171&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;130466&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;130900&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;133226&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;133806&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;133859&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;134396&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;134561&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;134606&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;136116&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;136554&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;136724&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;136738&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;136842&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;137577&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;138831&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;139699&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;139769&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;139884&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Delivery Cost' id='Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C'>
            <properties context=''>
              <relation connection='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6' name='Delivery Cost' table='[&apos;Delivery Cost$&apos;]' type='table'>
                <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='2'>
                  <column datatype='string' name='Gen3,Shipment Number' ordinal='0' />
                  <column datatype='string' name='Customer' ordinal='1' />
                  <column datatype='string' name='Gen5,Location' ordinal='2' />
                  <column datatype='real' name='Pounds Shipped' ordinal='3' />
                  <column datatype='real' name='Direct Load Cost' ordinal='4' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='On Time, Held Time' id='On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E'>
            <properties context=''>
              <relation connection='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6' name='On Time, Held Time' table='[&apos;On Time, Held Time$&apos;]' type='table'>
                <columns gridOrigin='A1:K10001:no:A1:K2147483647:0' header='yes' outcome='2'>
                  <column datatype='integer' name='Load #' ordinal='0' />
                  <column datatype='string' name='Carrier Name' ordinal='1' />
                  <column datatype='integer' name='Sold To' ordinal='2' />
                  <column datatype='string' name='Sched Arrive Date' ordinal='3' />
                  <column datatype='datetime' name='Sched Arrive Time' ordinal='4' />
                  <column datatype='string' name='Actual Arrive Date' ordinal='5' />
                  <column datatype='datetime' name='Actual Arrive Time' ordinal='6' />
                  <column datatype='string' name='Empty Date' ordinal='7' />
                  <column datatype='datetime' name='Empty Time' ordinal='8' />
                  <column datatype='string' name='LATE? (Yes/No)' ordinal='9' />
                  <column datatype='string' name='HELD' ordinal='10' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='TMS Data' id='TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928'>
            <properties context=''>
              <relation connection='excel-direct.0bs1tcf1ebtxvu13benj31nss7i6' name='TMS Data' table='[&apos;TMS Data$&apos;]' type='table'>
                <columns gridOrigin='A1:L10001:no:A1:L10001:0' header='yes' outcome='2'>
                  <column datatype='integer' name='Shipment Number' ordinal='0' />
                  <column datatype='string' name='Carrier Name' ordinal='1' />
                  <column datatype='integer' name='Driver #' ordinal='2' />
                  <column datatype='string' name='Pickup ID' ordinal='3' />
                  <column datatype='string' name='Pickup City' ordinal='4' />
                  <column datatype='string' name='Pickup State' ordinal='5' />
                  <column datatype='string' name='Pickup Depart Date' ordinal='6' />
                  <column datatype='string' name='Pickup Depart Time' ordinal='7' />
                  <column datatype='string' name='Dropoff ID' ordinal='8' />
                  <column datatype='string' name='Dropoff City' ordinal='9' />
                  <column datatype='string' name='Dropoff State' ordinal='10' />
                  <column datatype='integer' name='# of Stops' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression _.fcp.RelationshipCalculations.false...op='[INT(RIGHT(Gen3,Shipment Number,7))]' _.fcp.RelationshipCalculations.true...op='INT(RIGHT([Gen3,Shipment Number],7))' />
              <expression op='[Load #]' />
            </expression>
            <first-end-point object-id='Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C' />
            <second-end-point object-id='On Time, Held Time_0D85B2D5FA1E40DDB7E61641896FDF6E' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression _.fcp.RelationshipCalculations.false...op='[INT(RIGHT(Gen3,Shipment Number,7))]' _.fcp.RelationshipCalculations.true...op='INT(RIGHT([Gen3,Shipment Number],7))' />
              <expression op='[Shipment Number]' />
            </expression>
            <first-end-point object-id='Delivery Cost_93BE6B57DF3D4ED4837A79B248AFB18C' />
            <second-end-point object-id='TMS Data_9EE1AF48F2FF4BE0B1A20C668CF80928' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Average Per Pound Delivery Cost'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column caption='DELIVERY COST PER POUND' datatype='real' default-format='C1033%' name='[Calculation_1039768597327163398]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Direct Load Cost]/[Pounds Shipped]' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='real' name='[Direct Load Cost]' role='measure' type='quantitative' />
            <column datatype='real' name='[Pounds Shipped]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1039768597327163398]' derivation='Avg' name='[avg:Calculation_1039768597327163398:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Calculation_1039768597327163398])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[avg:Calculation_1039768597327163398:qk]' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[avg:Calculation_1039768597327163398:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[avg:Calculation_1039768597327163398:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{6B99AFEE-AE64-444D-B0FC-555288A837CE}' />
    </worksheet>
    <worksheet name='Customer Late'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1062005120698818562]' derivation='User' name='[usr:Calculation_1062005120698818562:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' />
          <filter class='quantitative' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' included-values='in-range'>
            <min>1.0</min>
            <max>1.0</max>
          </filter>
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' value='p0.00%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' value='p0.00%' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
            <format attr='background-color' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{93B93F69-1558-49F2-803A-38516F36AAFD}' />
    </worksheet>
    <worksheet name='Daily Drop Trailer Savings'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='COST OF HELD TIME' datatype='integer' name='[Calculation_1166432337424392192]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Calculation_1197113109266837518])*65' />
            </column>
            <column caption='DROP TRAILER COST' datatype='integer' name='[Calculation_1166432337424883713]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Customer])*25' />
            </column>
            <column caption='DROP TRAILER SAVINGS' datatype='integer' default-format='C1033%' name='[Calculation_1166432337425633282]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1166432337424392192]-[Calculation_1166432337424883713]' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
            </column>
            <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
            </column>
            <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Empty Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Empty Time]' role='dimension' type='ordinal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1197113109266837518]' derivation='Sum' name='[sum:Calculation_1197113109266837518:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1197113109219569666]' derivation='Day-Trunc' name='[tdy:Calculation_1197113109219569666:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1197113109219569666]' derivation='Day-Trunc' name='[tdy:Calculation_1197113109219569666:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1166432337425633282]' derivation='User' name='[usr:Calculation_1166432337425633282:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Calculation_1197113109266837518])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[tdy:Calculation_1197113109219569666:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[tdy:Calculation_1197113109219569666:ok]' />
              <groupfilter function='member' level='[tdy:Calculation_1197113109219569666:ok]' member='#2021-07-03 00:00:00#' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[tdy:Calculation_1197113109219569666:qk]' included-values='non-null' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[tdy:Calculation_1197113109219569666:qk]</column>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[tdy:Calculation_1197113109219569666:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[tdy:Calculation_1197113109219569666:qk]' scope='cols' value='Day of Arrival' />
            <format attr='title' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1166432337425633282:qk]' scope='rows' value='Drop Trailer Savings' />
          </style-rule>
        </style>
        <panes>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1197113109266837518:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1166432337425633282:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[tdy:Calculation_1197113109219569666:qk]</cols>
      </table>
      <simple-id uuid='{0318E20F-3E3F-4366-9142-643159E6BDE9}' />
    </worksheet>
    <worksheet name='Held Hours per Delivery'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
            </column>
            <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
            </column>
            <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Empty Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Empty Time]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1197113109266837518]' derivation='Avg' name='[avg:Calculation_1197113109266837518:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[avg:Calculation_1197113109266837518:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{092F73C0-801F-4CB8-91F1-A588F05E7E73}' />
    </worksheet>
    <worksheet name='Held Time Cost Per Pound'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='HELD TIME COST' datatype='integer' default-format='C1033%' name='[Calculation_1039768597327736839]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1197113109266837518]*65' />
            </column>
            <column caption='HELD TIME COST PER POUND' datatype='real' default-format='C1033%' name='[Calculation_1039768597327884296]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1039768597327736839]/[Pounds Shipped]' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
            </column>
            <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
            </column>
            <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Empty Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Empty Time]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Pounds Shipped]' role='measure' type='quantitative' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1039768597327884296]' derivation='Sum' name='[sum:Calculation_1039768597327884296:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Calculation_1039768597327884296])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327884296:qk]' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327884296:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{E4EFED2D-CC79-4694-910B-ED9C9DC9A060}' />
    </worksheet>
    <worksheet name='Incidences of Held Time'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='HELD?' datatype='boolean' name='[Calculation_1039768597318828033]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Calculation_1197113109266837518]&gt;0' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
            </column>
            <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
            </column>
            <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Empty Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Empty Time]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1197113109266837518]' derivation='Count' name='[cnt:Calculation_1197113109266837518:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1039768597318828033]' derivation='None' name='[none:Calculation_1039768597318828033:nk]' pivot='key' type='nominal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1039768597318828033:nk]'>
            <groupfilter function='member' level='[none:Calculation_1039768597318828033:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([Calculation_1197113109266837518])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1197113109266837518:qk]' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1039768597318828033:nk]</column>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1197113109266837518:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1197113109266837518:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{CAA355EF-16C3-40E9-BEBB-39EC60FDB033}' />
    </worksheet>
    <worksheet name='Late Count City'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='DRIVER LATE' datatype='boolean' name='[Calculation_1039768597332709386]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='string' name='[Dropoff City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1039768597332709386]' derivation='Count' name='[cnt:Calculation_1039768597332709386:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Dropoff City]' derivation='None' name='[none:Dropoff City:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]' field-type='quantitative' max='-5473270.237835547' min='-14551689.68943147' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]' field-type='quantitative' max='8108514.7132876404' min='1482471.7823750803' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <size column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1039768597332709386:qk]' />
              <lod column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff City:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{B3B0A9AA-E036-4ECC-8F8C-BD0BB43DD32B}' />
    </worksheet>
    <worksheet name='Late Count State'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Late Count by State</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='DRIVER LATE' datatype='boolean' name='[Calculation_1039768597332709386]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='string' name='[Dropoff State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1039768597332709386]' derivation='Count' name='[cnt:Calculation_1039768597332709386:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Dropoff State]' derivation='Count' name='[cnt:Dropoff State:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Dropoff State]' derivation='None' name='[none:Dropoff State:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Dropoff State:qk]' included-values='in-range'>
            <min>1</min>
            <max>2655</max>
          </filter>
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Dropoff State:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]' field-type='quantitative' max='-7506501.2836872535' min='-13794261.675328549' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]' field-type='quantitative' max='6968062.36991808' min='1990902.1777642849' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='size' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1039768597332709386:qk]' value='Late Count'>
              <formatted-text>
                <run>Late Count</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1039768597332709386:qk]' />
              <lod column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Destination:&#9;</run>
                <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Late Count:&#9;</run>
                <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1039768597332709386:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{4607FE26-527A-4352-BBFC-5A5CABB1C971}' />
    </worksheet>
    <worksheet name='Late Customer Distribution'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1062005120698818562]' derivation='User' name='[usr:Calculation_1062005120698818562:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Customer:nk]' />
              <groupfilter function='member' level='[none:Customer:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' />
          <filter class='quantitative' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' included-values='non-null' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</column>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{A62D500C-033D-4AF4-A907-957DBBFF7E54}' />
    </worksheet>
    <worksheet name='Late Driver'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='integer' name='[Driver #]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Driver #]' derivation='None' name='[none:Driver #:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1062005120698818562]' derivation='User' name='[usr:Calculation_1062005120698818562:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Driver #:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Driver #:ok]' />
              <groupfilter function='member' level='[none:Driver #:ok]' member='%null%' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Driver #:ok]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' />
          <filter class='quantitative' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' included-values='in-range'>
            <min>1.0</min>
            <max>1.0</max>
          </filter>
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Driver #:ok]</column>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' value='p0.00%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Driver #:ok]</rows>
        <cols />
      </table>
      <simple-id uuid='{F8C26A2E-6C4A-46FC-A149-6689B650D72B}' />
    </worksheet>
    <worksheet name='Late Driver Distribution'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='integer' name='[Driver #]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Driver #]' derivation='None' name='[none:Driver #:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1062005120698818562]' derivation='User' name='[usr:Calculation_1062005120698818562:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Driver #:ok]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' />
          <filter class='quantitative' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' included-values='non-null' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Driver #:ok]</cols>
      </table>
      <simple-id uuid='{C3BB1FE9-87E7-4C23-A4FB-C959BF885576}' />
    </worksheet>
    <worksheet name='Late Frequency'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Late Frequency by State</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Dropoff State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Customer]' derivation='Count' name='[cnt:Customer:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Dropoff State]' derivation='None' name='[none:Dropoff State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1062005120698818562]' derivation='User' name='[usr:Calculation_1062005120698818562:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Dropoff State:nk]' />
              <groupfilter function='member' level='[none:Dropoff State:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]' field-type='quantitative' max='-5172090.6372713782' min='-16315187.985349663' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]' field-type='quantitative' max='6569066.3382928362' min='2923273.4139915253' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:ok]' value='p0.00%' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' value='false' />
            <format attr='break-on-special' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='streets' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:ok]' />
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' />
              <lod column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' />
              <tooltip column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Customer:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Dropoff State:&#9;</run>
                <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Count of Customer:&#9;</run>
                <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Customer:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Late Frequency:&#9;</run>
                <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:ok]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{ADA7C04C-CE85-461A-9907-2760C638B4AC}' />
    </worksheet>
    <worksheet name='Late Prediction'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='integer' name='[# of Stops]' role='measure' type='quantitative' />
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
            </column>
            <column caption='Stops Per Load' datatype='integer' name='[Calculation_1062005120701775875]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Load #]:MAX([# of Stops])}' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1062005120701775875]' derivation='None' name='[none:Calculation_1062005120701775875:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Load #]' derivation='None' name='[none:Load #:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1062005120698818562]' derivation='User' name='[usr:Calculation_1062005120698818562:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1062005120701775875:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Calculation_1062005120701775875:ok]' />
              <groupfilter function='member' level='[none:Calculation_1062005120701775875:ok]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Load #:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Load #:ok]' />
              <groupfilter function='member' level='[none:Load #:ok]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1062005120701775875:ok]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Load #:ok]</column>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1062005120701775875:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' scope='rows' value='Late Frequency' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='16' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Stops per Load:&#9;</run>
                <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1062005120701775875:ok]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Late Frequency:&#9;</run>
                <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1062005120701775875:ok]</cols>
      </table>
      <simple-id uuid='{BD42D778-8B06-4E49-84A4-ABC604680214}' />
    </worksheet>
    <worksheet name='Late Prediction State'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='PERCENT DRIVER LATE' datatype='real' default-format='p0.00%' name='[Calculation_1062005120698818562]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_1197113109222420485]=&quot;LATE&quot; THEN [Load #]END)/COUNT([Load #])' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='string' name='[Dropoff State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column-instance column='[Dropoff State]' derivation='None' name='[none:Dropoff State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1062005120698818562]' derivation='User' name='[usr:Calculation_1062005120698818562:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Dropoff State:nk]' />
              <groupfilter function='member' level='[none:Dropoff State:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]</cols>
      </table>
      <simple-id uuid='{9AEB795B-C232-4EFD-AE80-D84B378B0B75}' />
    </worksheet>
    <worksheet name='Late/Held'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='HELD? TRUE/FALSE' datatype='string' name='[Calculation_1039768597320548355]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1197113109266837518] &gt; 0&#13;&#10;THEN&#13;&#10;&quot;TRUE&quot;&#13;&#10;END' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
            </column>
            <column caption='LATE/ONTIME (DATE+TIME)' datatype='string' name='[Calculation_1197113109222420485]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;minute&apos;,[Calculation_1534320131314319377],[Calculation_1197113109219569666])&gt;30&#13;&#10;THEN&quot;LATE&quot;ELSE&quot;ON TIME&quot;END' />
            </column>
            <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
            </column>
            <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
            </column>
            <column caption='SCHEDULED ARRIVE TIME' datatype='string' name='[Calculation_1534320131311861775]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Sched Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Sched Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Sched Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Sched Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Sched Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Sched Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Sched Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='SCHEDULED DATE AND TIME' datatype='datetime' datatype-customized='true' name='[Calculation_1534320131314319377]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Sched Arrive Date]+&quot; &quot;+[Calculation_1534320131311861775] )' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Empty Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Empty Time]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Load #]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sched Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Sched Arrive Time]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Sold To]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1197113109219569666]' derivation='Attribute' name='[attr:Calculation_1197113109219569666:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1197113109221490692]' derivation='Attribute' name='[attr:Calculation_1197113109221490692:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1197113109266321421]' derivation='Attribute' name='[attr:Calculation_1197113109266321421:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1197113109266837518]' derivation='Attribute' name='[attr:Calculation_1197113109266837518:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1534320131314319377]' derivation='Attribute' name='[attr:Calculation_1534320131314319377:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1039768597320548355]' derivation='None' name='[none:Calculation_1039768597320548355:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1197113109222420485]' derivation='None' name='[none:Calculation_1197113109222420485:nk]' pivot='key' type='nominal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Load #]' derivation='None' name='[none:Load #:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Sold To]' derivation='None' name='[none:Sold To:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Load #:ok] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[attr:Calculation_1534320131314319377:ok] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[attr:Calculation_1197113109219569666:ok] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[attr:Calculation_1197113109266321421:ok] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[attr:Calculation_1197113109221490692:ok] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1197113109222420485:nk] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Sold To:ok] / ([federated.17b4hfc1jqatiu14kdrf716mek5o].[attr:Calculation_1197113109266837518:ok] / [federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1039768597320548355:nk])))))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{D8CEF1CB-387C-4FD2-A953-F2667B64CDC4}' />
    </worksheet>
    <worksheet name='Most Frequent Customers'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column-instance column='[Customer]' derivation='Count' name='[cnt:Customer:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Customer:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Customer:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{F56A6A16-6A44-431D-9572-AD39B8584C7D}' />
    </worksheet>
    <worksheet name='Percent Held'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{D303A149-6C1D-4874-92B7-43852E3BC03E}' />
    </worksheet>
    <worksheet name='Total Held Hours'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
            </column>
            <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
            </column>
            <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Empty Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Empty Time]' role='dimension' type='ordinal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1197113109266837518]' derivation='Sum' name='[sum:Calculation_1197113109266837518:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Calculation_1197113109266837518])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1197113109266837518:qk]' />
          <filter class='quantitative' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1197113109266837518:qk]' included-values='non-null' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1197113109266837518:qk]</column>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1197113109266837518:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#4e79a7' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1197113109266837518:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{11D16AF1-E6B4-4A57-940C-56A94E773509}' />
    </worksheet>
    <worksheet name='Total Held Time Cost'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column datatype='string' name='[Actual Arrive Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Actual Arrive Time]' role='dimension' type='ordinal' />
            <column caption='HELD TIME COST' datatype='integer' default-format='C1033%' name='[Calculation_1039768597327736839]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1197113109266837518]*65' />
            </column>
            <column caption='ACTUAL ARRIVE TIME' datatype='string' name='[Calculation_1197113109218947072]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Actual Arrive Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Actual Arrive Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Actual Arrive Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Actual Arrive Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Actual Arrive Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Actual Arrive Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Actual Arrive Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='ACTUAL ARRIVE DATE + TIME' datatype='datetime' name='[Calculation_1197113109219569666]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Actual Arrive Date]+&quot; &quot;+[Calculation_1197113109218947072] )' />
            </column>
            <column caption='EMPTY TIME' datatype='string' name='[Calculation_1197113109221175299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;,[Empty Time]) = 0 THEN &apos;12&apos;&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&lt;10 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;,[Empty Time])&gt;12 THEN STR(DATEPART(&apos;hour&apos;,[Empty Time])-12)&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;hour&apos;,[Empty Time])) END //hour&#13;&#10;&#13;&#10;+ &apos;:&apos; +&#13;&#10;&#13;&#10;IF DATEPART(&apos;minute&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;minute&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;minute&apos;,[Empty Time])) END //minute&#13;&#10;&#13;&#10;+&apos;:&apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;second&apos;,[Empty Time])&lt;10 THEN &apos;0&apos;+STR(DATEPART(&apos;second&apos;,[Empty Time]))&#13;&#10;&#13;&#10;ELSE STR(DATEPART(&apos;second&apos;,[Empty Time])) END //second&#13;&#10;&#13;&#10;+&apos; &apos;+&#13;&#10;&#13;&#10;IF DATEPART(&apos;hour&apos;,[Empty Time])&gt;=12 THEN &apos;PM&apos; ELSE &apos;AM&apos; END //AM or PM' />
            </column>
            <column caption='EMPTY DATE + TIME' datatype='datetime' name='[Calculation_1197113109221490692]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='DATEPARSE ( &quot;MM/dd/yyyy hh:mm:ss a&quot;, [Empty Date]+&quot; &quot;+[Calculation_1197113109221175299] )' />
            </column>
            <column caption='LATE UNLOAD' datatype='datetime' name='[Calculation_1197113109266321421]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATEADD(&apos;hour&apos;,1,[Calculation_1197113109219569666])' />
            </column>
            <column caption='HELD TIME' datatype='integer' name='[Calculation_1197113109266837518]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;hour&apos;,[Calculation_1197113109219569666],[Calculation_1197113109221490692])&gt;1&#13;&#10;THEN&#13;&#10;DATEDIFF(&apos;hour&apos;,[Calculation_1197113109266321421],[Calculation_1197113109221490692])&#13;&#10;ELSE&#13;&#10;0&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='string' name='[Empty Date]' role='dimension' type='nominal' />
            <column datatype='datetime' name='[Empty Time]' role='dimension' type='ordinal' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1039768597327736839]' derivation='Sum' name='[sum:Calculation_1039768597327736839:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Calculation_1039768597327736839])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327736839:qk]' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327736839:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327736839:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{F235423F-D530-4029-BF7D-D262F62E40BB}' />
    </worksheet>
    <worksheet name='Total Per Pound Delivery Cost'>
      <table>
        <view>
          <datasources>
            <datasource caption='Delivery Cost (Perdue)' name='federated.17b4hfc1jqatiu14kdrf716mek5o' />
          </datasources>
          <datasource-dependencies datasource='federated.17b4hfc1jqatiu14kdrf716mek5o'>
            <column caption='DELIVERY COST PER POUND' datatype='real' default-format='C1033%' name='[Calculation_1039768597327163398]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Direct Load Cost]/[Pounds Shipped]' />
            </column>
            <column datatype='string' name='[Customer]' role='dimension' type='nominal' />
            <column datatype='real' name='[Direct Load Cost]' role='measure' type='quantitative' />
            <column datatype='real' name='[Pounds Shipped]' role='measure' type='quantitative' />
            <column-instance column='[Customer]' derivation='None' name='[none:Customer:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1039768597327163398]' derivation='Sum' name='[sum:Calculation_1039768597327163398:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Calculation_1039768597327163398])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]' direction='DESC' using='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327163398:qk]' />
          <slices>
            <column>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327163398:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327163398:qk]</rows>
        <cols>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</cols>
      </table>
      <simple-id uuid='{9F4B7613-EF21-44E0-A667-A0471E9B0FF9}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='49000' id='5' name='Total Held Hours' w='98400' x='800' y='50000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49000' id='6' name='Daily Drop Trailer Savings' w='98400' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='14' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='13' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='6' is-fixed='true' name='Daily Drop Trailer Savings' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='5' is-fixed='true' name='Total Held Hours' w='98400' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{CB20345C-ADEC-45B6-BA0F-072AC593D802}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='2'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='49000' id='3' name='Average Per Pound Delivery Cost' w='98400' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49000' id='9' name='Total Per Pound Delivery Cost' w='98400' x='800' y='50000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='13' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='12' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Average Per Pound Delivery Cost' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='9' is-fixed='true' name='Total Per Pound Delivery Cost' w='98400' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{321104F6-157E-418C-B546-5ED51173F52C}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='3'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='49000' id='3' name='Incidences of Held Time' w='98400' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49000' id='5' name='Total Held Time Cost' w='98400' x='800' y='50000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='9' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='8' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Incidences of Held Time' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='5' is-fixed='true' name='Total Held Time Cost' w='98400' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{2922B900-7B12-4B63-A22A-C7253AB6B562}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='4'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='3' name='Held Time Cost Per Pound' w='98400' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='8' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='7' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='98000' id='3' is-fixed='true' name='Held Time Cost Per Pound' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{540478CF-2890-4FD8-B26A-C33128DE48D9}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='5 and 6'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='49000' id='3' name='Late Driver' w='49200' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49000' id='8' name='Customer Late' w='49200' x='50000' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49000' id='11' name='Late Customer Distribution' w='49200' x='50000' y='50000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49000' id='12' name='Late Driver Distribution' w='49200' x='800' y='50000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1200' minheight='1200' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='16' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='15' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Late Driver' w='49200' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='8' is-fixed='true' name='Customer Late' w='49200' x='50000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='12' is-fixed='true' name='Late Driver Distribution' w='49200' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='11' is-fixed='true' name='Late Customer Distribution' w='49200' x='50000' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{260A3BC0-786E-4A5C-BFF2-5778242AAD67}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='7'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='12' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='5250' id='13' type-v2='title' w='98400' x='800' y='1000'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='92750' id='10' type-v2='layout-basic' w='98400' x='800' y='6250'>
              <zone h='46375' id='5' param='horz' type-v2='layout-flow' w='98400' x='800' y='6250'>
                <zone h='46375' id='3' type-v2='layout-basic' w='98400' x='800' y='6250'>
                  <zone h='46375' id='1' name='Late Frequency' w='98400' x='800' y='6250'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
              <zone h='46375' id='9' name='Late Prediction' w='98400' x='800' y='52625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='24' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='23' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='5250' id='13' type-v2='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46375' id='1' is-fixed='true' name='Late Frequency' w='98400' x='800' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46375' id='9' is-fixed='true' name='Late Prediction' w='98400' x='800' y='52625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{BDCF27C9-1D3C-47C3-9692-2BC0F7681BDE}' />
    </dashboard>
    <dashboard name='Purdue Logistics' type='storyboard'>
      <style />
      <size maxheight='964' maxwidth='1016' minheight='964' minwidth='1016' />
      <zones>
        <zone h='100000' id='2' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98340' id='1' param='vert' removable='false' type-v2='layout-flow' w='98426' x='787' y='830'>
            <zone h='3423' id='3' type-v2='title' w='98426' x='787' y='830' />
            <zone h='10477' id='4' is-fixed='true' paired-zone-id='5' removable='false' type-v2='flipboard-nav' w='98426' x='787' y='4253' />
            <zone h='84440' id='5' paired-zone-id='4' removable='false' type-v2='flipboard' w='98426' x='787' y='14730'>
              <flipboard active-id='3' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='Which customers would offer the greatest savings by using a drop trailer?' captured-sheet='1' id='3'>
                    <capturedDeltas>
                      <worksheet name='Daily Drop Trailer Savings'>
                        <selection-collection />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='What are the top 10 customers with the highest per pound delivery cost?' captured-sheet='2' id='4'>
                    <capturedDeltas>
                      <worksheet name='Average Per Pound Delivery Cost'>
                        <annotations>
                          <annotation class='point' delta-type='added' id='0' mark-position='1' pullback='12' text-width='180'>
                            <formatted-text>
                              <run fontcolor='#787878'>Customer: </run>
                              <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]>]]></run>
                              <run>Æ&#10;</run>
                              <run fontcolor='#787878'>Avg. DELIVERY COST PER POUND: </run>
                              <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[avg:Calculation_1039768597327163398:qk]>]]></run>
                            </formatted-text>
                            <point>
                              <visual-coordinate class='mark'>
                                <tuple-reference>
                                  <tuple-descriptor>
                                    <pane-descriptor>
                                      <x-fields>
                                        <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
                                      </x-fields>
                                      <y-fields>
                                        <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[avg:Calculation_1039768597327163398:qk]</field>
                                      </y-fields>
                                    </pane-descriptor>
                                    <columns>
                                      <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[avg:Calculation_1039768597327163398:qk]</field>
                                      <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
                                    </columns>
                                  </tuple-descriptor>
                                  <tuple>
                                    <value>1.2396738719040206</value>
                                    <value>&quot;112148&quot;</value>
                                  </tuple>
                                </tuple-reference>
                              </visual-coordinate>
                            </point>
                            <body x='131' y='-59' />
                          </annotation>
                        </annotations>
                      </worksheet>
                      <worksheet name='Total Per Pound Delivery Cost'>
                        <annotations>
                          <annotation class='point' delta-type='added' id='0' mark-position='1' pullback='12' text-width='180'>
                            <formatted-text>
                              <run fontcolor='#787878'>Customer: </run>
                              <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]>]]></run>
                              <run>Æ&#10;</run>
                              <run fontcolor='#787878'>DELIVERY COST PER POUND: </run>
                              <run bold='true'><![CDATA[<[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327163398:qk]>]]></run>
                            </formatted-text>
                            <point>
                              <visual-coordinate class='mark'>
                                <tuple-reference>
                                  <tuple-descriptor>
                                    <pane-descriptor>
                                      <x-fields>
                                        <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
                                      </x-fields>
                                      <y-fields>
                                        <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327163398:qk]</field>
                                      </y-fields>
                                    </pane-descriptor>
                                    <columns>
                                      <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
                                      <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:Calculation_1039768597327163398:qk]</field>
                                    </columns>
                                  </tuple-descriptor>
                                  <tuple>
                                    <value>&quot;112148&quot;</value>
                                    <value>90.4961926489935</value>
                                  </tuple>
                                </tuple-reference>
                              </visual-coordinate>
                            </point>
                            <body x='242' y='31' />
                          </annotation>
                        </annotations>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='Which 10 customers had the highest incidence of held time? Number of occurrences? Overall cost of occurrences?' captured-sheet='3' id='5' />
                  <story-point caption='What are the top 10 customers in held time cost per pound?' captured-sheet='4' id='6' />
                  <story-point caption='Which customers and drivers had the lowest on time performance (highest % late)?' captured-sheet='5 and 6' id='7' />
                  <story-point caption='Can you predict when a late arrival is more likely to happen?' captured-sheet='7' id='8'>
                    <capturedDeltas>
                      <worksheet name='Late Frequency'>
                        <annotations>
                          <annotation class='area' delta-type='added' id='0' text-pinx='0.5' text-piny='0.5' text-width-delta='-18'>
                            <formatted-text>
                              <run>Notice that Idaho has a frequency
of 100%, but only 1 delivery. The number of observations in each state is important.</run>
                            </formatted-text>
                            <top-left>
                              <visual-coordinate class='axis'>
                                <x-coord axis-value='-15284445.028255403'>
                                  <node-reference>
                                    <axis>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]</axis>
                                  </node-reference>
                                </x-coord>
                                <y-coord axis-value='5866529.2678282503'>
                                  <node-reference>
                                    <axis>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]</axis>
                                  </node-reference>
                                </y-coord>
                                <page-reference />
                                <projection name='EPSG:3857' u='-137.30250578166459' v='46.535169794261435' />
                              </visual-coordinate>
                            </top-left>
                            <bottom-right>
                              <visual-coordinate class='axis'>
                                <x-coord axis-value='-14095403.401842533'>
                                  <node-reference>
                                    <axis>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]</axis>
                                  </node-reference>
                                </x-coord>
                                <y-coord axis-value='3736593.8044324466'>
                                  <node-reference>
                                    <axis>[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]</axis>
                                  </node-reference>
                                </y-coord>
                                <page-reference />
                                <projection name='EPSG:3857' u='-126.62116311705444' v='31.796241720869517' />
                              </visual-coordinate>
                            </bottom-right>
                            <text x='0.5' y='0.5' />
                          </annotation>
                        </annotations>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Latitude (generated)]' field-type='quantitative' max='6362824.9097845536' min='3064526.7892832854' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[Longitude (generated)]' field-type='quantitative' max='-5679056.58532013' min='-15760061.67882055' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <simple-id uuid='{835D4A19-508D-440A-AE4B-70390FE3C5F2}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Late/Held'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1039768597318828033:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[sum:# of Stops:ok]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[yr:Actual Arrive Time:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C9795613-2EC6-4B2D-9FAA-1FE168F694F2}' />
    </window>
    <window class='worksheet' name='Total Held Hours'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{BC0FC236-79B5-4DF2-96DE-FB621334D934}' />
    </window>
    <window class='worksheet' name='Incidences of Held Time'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{3861668D-61E8-498C-96D9-EC16A375BA3F}' />
    </window>
    <window class='worksheet' name='Percent Held'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{3AA25658-CCC3-490B-8DF8-4BC8ADC41DB9}' />
    </window>
    <window class='worksheet' name='Held Hours per Delivery'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{3E717FDD-6D33-4571-92DE-01E6C17875E2}' />
    </window>
    <window class='worksheet' name='Most Frequent Customers'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{CDE33AC6-D800-415C-8BA9-6531CCD4DA1D}' />
    </window>
    <window class='worksheet' name='Held Time Cost Per Pound'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{E68C98CA-CC04-4FE1-B5BC-DDA96FC2D9FF}' />
    </window>
    <window class='worksheet' name='Late Driver'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{F8DCB74D-D4CC-4A79-9A9E-F0BD20E2AD2F}' />
    </window>
    <window class='worksheet' name='Late Driver Distribution'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{57E50E73-C164-4FDA-901C-7C2915B72D9E}' />
    </window>
    <window class='worksheet' name='Customer Late'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{72A4F246-AC41-47E9-93F6-907DAF672EE4}' />
    </window>
    <window class='worksheet' name='Late Customer Distribution'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{23145C60-DEE0-43F3-9D27-B055C5721487}' />
    </window>
    <window class='worksheet' name='Late Prediction'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5906FAA8-C010-4A56-92AF-0849288668CF}' />
    </window>
    <window class='worksheet' name='Late Prediction State'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3DE26DBA-A7D3-405D-81FF-A73D460C120D}' />
    </window>
    <window class='worksheet' name='Late Count State'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='6' param='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1039768597332709386:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Dropoff State:ok]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1039768597332709386:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{BD2AFDD1-FA63-43DE-A460-44116714CDE4}' />
    </window>
    <window class='worksheet' name='Late Count City'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.17b4hfc1jqatiu14kdrf716mek5o].[cnt:Calculation_1039768597332709386:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1039768597332709386:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff City:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Pickup City:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{5A68539F-5A2B-4F9C-8116-9963C187BF3A}' />
    </window>
    <window class='worksheet' name='Late Frequency'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:ok]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Calculation_1039768597332709386:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[usr:Calculation_1062005120698818562:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{E90E2BA8-E712-4B9C-81C7-BF852478C0B5}' />
    </window>
    <window class='worksheet' name='Total Per Pound Delivery Cost'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{591C9398-00E9-4A21-ABB9-FBA04984A2F8}' />
    </window>
    <window class='worksheet' name='Average Per Pound Delivery Cost'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{5C44D868-67C0-4737-8BA0-C04C84490B89}' />
    </window>
    <window class='worksheet' name='Daily Drop Trailer Savings'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[yr:Calculation_1197113109219569666:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4E751150-D4E2-498F-98F9-30FB187178A7}' />
    </window>
    <window class='worksheet' name='Total Held Time Cost'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Customer:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DAF958B9-FADC-4B89-AB65-B31B7BBC936F}' />
    </window>
    <window class='dashboard' name='1'>
      <viewpoints>
        <viewpoint name='Daily Drop Trailer Savings'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Total Held Hours'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='5' />
      <simple-id uuid='{5363439D-77B3-4237-B2CF-75A83033A56D}' />
    </window>
    <window class='dashboard' name='2'>
      <viewpoints>
        <viewpoint name='Average Per Pound Delivery Cost'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Total Per Pound Delivery Cost'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{CC7A6488-E747-4C9E-A1E5-2451C8CBEFD0}' />
    </window>
    <window class='dashboard' name='3'>
      <viewpoints>
        <viewpoint name='Incidences of Held Time'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Total Held Time Cost'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{834C63AB-5E5A-4FFA-9032-77D606EB0CC9}' />
    </window>
    <window class='dashboard' name='4'>
      <viewpoints>
        <viewpoint name='Held Time Cost Per Pound'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{0A80A48B-6125-4270-97A2-91A87898F6FD}' />
    </window>
    <window class='dashboard' name='5 and 6'>
      <viewpoints>
        <viewpoint name='Customer Late'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Late Customer Distribution'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Late Driver'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Late Driver Distribution'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{8D26A9EB-53D3-40E7-BEFD-BBD178A876C4}' />
    </window>
    <window class='dashboard' name='7'>
      <viewpoints>
        <viewpoint name='Late Frequency'>
          <zoom type='entire-view' />
          <highlight field='[federated.17b4hfc1jqatiu14kdrf716mek5o].[none:Dropoff State:nk]' type='size'>
            <bucket-selection />
          </highlight>
          <default-map-tool-selection tool='1' />
        </viewpoint>
        <viewpoint name='Late Prediction'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{31A95EB1-1094-4976-A3EC-CEEC1D024DD9}' />
    </window>
    <window class='dashboard' maximized='true' name='Purdue Logistics'>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{7B59300D-8848-4952-9030-D81F8022BF4E}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='1' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='4' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='5 and 6' width='192'>
      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
      +f8BN578iDg9+aQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='7' width='192'>
      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
      7HedqE3/D0udY85Ar3yzAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Average Per Pound Delivery Cost' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Customer Late' width='144'>
      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
    </thumbnail>
    <thumbnail height='192' name='Daily Drop Trailer Savings' width='192'>
      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
      uQE9G/QAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='64' name='Held Hours per Delivery' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAABACAYAAABMbHjfAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAALAklEQVR4nO2cf1CUdR7HX90tlZLOhU7EkJHUuUd2lPGYC0W6aNtdlGIwV+2mdJ4zZ6Z3
      54Z2P3Qd8ciJKcMoB6cstjsqSw11qDkQpsUyf5BwXugsISkdpo6LsraY7M587o9d+RWx1gAe
      83xfMzsD+30+331e3+d5s9/vwz57hYgICoVO+cnl3gGF4nKiAqDQNSoACl2jAqDQNSoACl2j
      AqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2j
      AqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2jAqDQNSoACl2j
      AqDQNSoACl2jAqDQNSoACl0zaAHoOPU5O4pymGNOZmV195YArbVOcrLMJGsaWmoGOc6DeEOt
      3oNOcjJS0TSN1IwcnAe9XZWttThzsjAna2haKhk5TrqaO2jYlEOWORlNS8Y8Zw1VXwcu9spB
      Zw4ZqX3VDbYv4N3Hi3OCvr2d+vOlo4FNF32TzcxZU0WnUr++F/FRvTINTdOwOY8Nke8pql9c
      GNovjWRzFjmbGui42Fy9Ek3Tejy69s3LvhfnBH17nRcQoP3LXTifXUhGqo3eOtUrtV79fneb
      PpFBwSXPznpS1m7/UF74TZI4XD3bctP/KMX7T8oFEbnQvFXsZrPk14jI6VJZZLJKwQGP+MUv
      ngMFYjXZpawtVJmbLn8s3i8ng4Wy1W4Wc36NiIj4964Rs9kuW5sviPh9cmjjXDFZ1kqdiJwu
      XSQma4Ec8PhF/B45UGAVk71M2obE94RsXmASa8EB8fj94ql0iMXsENc34Xz9sneNWcz2rRJU
      OiQb55rEsrYurG8n7iKZPbtIihxJYi0+OmC2/fvWSWlRtXzRdkFE/OI7tFHmmiwS2m05WmyV
      pJ4FXSO1eUHncfJ7KsVhMYvD9U2o8J/y+8dXSHH1m/JMklV66hyVYmvv/bg0Bukd4F7+Urqe
      JQ8lMMbQq+nbJOylBWRr13ElcOW4O0mM8dJ01AP1B/g03kLGpCgMGIiaNB9biosdFR7gW5Ls
      pRRka1wXLOTOxBi8TUfxAC2H/4M3dRazx10JhpEkTE8j3lPH5y1Qf+BT4i0ZTIoygCGKSfNt
      pLh2UOEZAt+WnWzfn4Jt/iSiDAai0hYyL76MbS5fGN8WDv/HS+qs2QSVEpieFo+n7nNawvgG
      8fLBhq388k+PkzBQmpfiy+3M+n0qt4y+EjAwMmEaU2/0cLYtNBzNTYy+JrKPPlvYuX0/Kbb5
      TIoyYIhKY+G8eMq2ufABxNko+kcu2alxXNVHbXPTaPrsNgxDvwa4OpLIboPmPVhKuduISRsD
      xlu5w11OaW0rASDQ3kFUbAx1h9zA1UT2LKS03I3RpDEGiJv2ABP3bOP9rzog0M7hyiqaJ89k
      RiwYb70Dd3kpta0BIEB7RxSxMXUccg+B75EG6o2JTOw8ONGMi4ug4ctjYXzjmPbARPZse5+g
      0mEqq5qZPHMGsWF8AQKfbWBd2zwW3vsjzooBosPbSMXqZ3jj6sVkpwD4OHvWT8x1Y/vY+ggN
      9UYSuwaK6HFxRDR8SdiZjO8sZ/0x9NltGL6T36Gjg4ZNy7C/3MiU/DexxQFksjq/iWX2dEzn
      /IyISiTheh/+8T3nth0Nm1hmf5nGKfm8GSyEOBuFK5t4bHYKeQDRmbzyXibRAJmryW9ahj3d
      xDn/CKISE7je52d87ynzEBF7YzxfN52G6P5942yFrGx6jNkpeQSVXuG9zGhCjd/vyzFK1u5k
      hr2MaGAoct6DY05smYW4gejJf6Cg0Eq8AeAsZ06DuzATrRAiRkWTYHmavKVpxPR1JsbeSPzX
      TZwO93pnz3AaN4WZGoVEMCo6AcvTeSxNiwl/gv/wWdMP4XvmZv4jsnmRRUxZuVJ53N9vDy5H
      Uuc8X8QvRzYvEospS3Irj0v3yjaXQyzWAtkfXCBI8/alkp6+Vmr67N4ljqTQumNA6cPX5ZAk
      a7F0n7J+kmuSB1+u77OHLt82cTksYi3oWvNsX5ou6WtrxC/9+7aV2eWeBZvlRLc+B3YN0I9v
      N/y+VvmiPFey7pkrxUd6Hwi/+I6Xi8OSJLOL3BI8Jr3m9p/kiunBl6XnSPWxXc8XlePlDrEk
      zZYid3iDy3AZ1Ev16id53mul5O0VpPUZ/RCBfezeFYGW+ItgZfVqnnzei7XkbVb0SnddZRlj
      LRlowQUC4x6az8yr3uWDfX11u5tdERqhbgeXmycw0X2Qet/FJ07y1TE/E8bH9bVj3XzrqCwb
      iyWja83z0PyZXPXuB+yjP98WdmxycX7/GtJDV0TsZaG/ut+5PDW4GEZeyy33rWBxWj3lu1p6
      tzIy5j7mWY00Hz8B3MyEiW4Odg0UJ786hn/CePoYqf5elJj75mE1NnP8RPjNhz4ALTvYWDaW
      BbnZobfF7ng4VNuItwMItFL7yjo2RzzMI9MjgRZ2bCxj7IJcsr9bSFy8sds8v4NTFSVsOa6R
      aAQ8h6ht9BLstpZX1m0m4uFHmD4U0+PYGcycvJuS12ppDQRorVrP6/VpWKZGhvGNI97opry0
      lqDSKSpKtnBcS8TYr28sNmcNNTVdj7XpYFy8hZpV9w6+77+3sWFXI2fag9O4jlMVVO6JIPb6
      sdCyk1edu2j0dnS2vf6WG2N8HBDLjJmT2V3yGrWtAQKtVax/vZ40y1TCHaaWna/i3BUaRzo4
      VfE6b7mNxF9CcgZnDVC9Es1e1vW7XaOM4EEoGd9APW7qMzUKu5UYF2+hJPsazlSs4qmFh0Nz
      9QfIL15CkgGCiyRw1wfnj90K2VKSTZytkJfOL2fVLBP/PR/BqJvu5okNecwaA3jOULHqKRYe
      Pod/RBSJD+RTvCRp4OT7882OI/O5dTQ/ZSfddA7DDdOYv8HB/aGj+v2+cdgKX+L88lXMMv2X
      8xGjuOnuJ9iQN4sxwJj+fAeb/nx/fS3tG5bzyF8baT0PEaNu4u4nNuC4PxICE7nt2xdYnvVX
      GlvPw4gbuMv2EoWhdVx05nOsa34quFYz3MC0+aE64JjTRmZht9VM6PxJX1vDiom38e0Ly8kK
      veaIG+7C9lIhtksIwBUiIgM3MgrF8EJ9FEKha1QAFLpGBUCha1QAFLom7IWQmpqaodgPheKy
      oK4CKXSNmgIpdI0KgELXqAAodM0wDYCHLYtTSV32Ab4ezx/DudIZ/vPjww7lG2TgfYdnADwf
      sefGPP7CR3zsC7/5sEf5DhrDMgCejz5i5JQUpk6DSh2cEcp38BiGAfCxd+8IUpIMRE6Zwvnd
      n9Hjxq5vDvJmTgapmkayeQ5rqr7ubA80ben6BgbLPN4Y8lulfgzKd1B9w98z83/GN2Vit5dJ
      8LsCjkrxXIe4Om82OirF9r/Jh00+8YvIhZPVsibjd/LOCRHx10j+o4vknUOhtrYvpPnk5VH4
      QSjfQfW9jPcE/xh8/GvValwuP1M1R+ezo59Pp/zPdwX/rX3Nz0kYPzL483Wp/PZRJ+vdQGQV
      7vuWsDRhZKjoFsaNHnqDH4byhcH1HV5TIN/HVB59gre63e1Us2c9lr1VHOh8H/TR3gEQoP3w
      Jv6+OZbpScDtaRgritjxZTsBgt9Y8NWpy2ZyaSjfQfcdVgEIfLabc5kZTOj+pOEuHv7VYapC
      I/Szn9aw4v5kNC2V9BX7uSfvb9wbCRiSWJI3BdeS+zFpGtOznmXnmcthcekoXwbdV30WSKFr
      htU7gEIx0KgAKHTN/wA0SqfLGMsF0wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Held Time Cost Per Pound' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Incidences of Held Time' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Late Count City' width='192'>
      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
      /g/bT3fpdCSH2AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Late Count State' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29WY8cWZYm9tnm+xYewWAEGWSSmWRm5V7VVZVdy9TS08t0DwbTI6FbQksQ
      oBlBgAQIggA9aBnoVX9AetGbHiQI0stAIwxmpF6mq7q7lq6uyqzcmZkkk0uQwVh9381MD87v
      xrHr18zNPYLJTCYPEAh3N7O72dnvOeda29vbYRiGMIFlWepz0j28Jj/zu2xDtjWZTOA4jrHN
      ZcCyLNi2PTNu9mf6rN/H72EYYjwew3VdYz9sIwzDyNz5fBAEsCwLruvCtm0Mh8OZ9k3t6p9H
      oxGy2ay6v1gsYjgcYjKZzKw12/U8D9lsVn3v9XozfcXNZx4MBgPkcrlU9xKCIFD9xI05Dk8W
      AfkuPM9DpVJJ1WbkDccthv6bjgT8jUjo+766ZkIyPr/I4ptAtm3btvpOQpDjs21bfeZL0cfD
      ++VixvWlI7/pXrkW8+ZqaksiD4nJ8zzYto18Po/JZIJutxsZt+/7qq/BYBDbn96vCSTBjkYj
      ZDKZxLa4lnJ9ZT9hGEbejfz9pAQgIQgCuK5rZGA6uBIByEHkxHl9MpnMvKQwDBW3m0fhEvg9
      jYRJA7Ztq4WNQ0z5m+M4sCxLIYu8RydsHSSBmKSJ7Gc8Hi80D50TOo4D3/fhOA4ymQwmkwmG
      w6FCsn6/P9NGEATo9XrI5XJwXReTycSIkCYg0pBwOBeuk468OqR5h/qazWtzGfB9H91uN5UU
      mCERcrfJZKJ+S6JSnZvri21CSEk4+r1pIY2aM0+0Oo6DIAhm7jfNNU566P3pL5hcbxkCp4po
      WVYE2V3XheM4yOVySsWxLAv5fF6Nic+ORqPU/VF9Igft9/vwfR+TyUSpVfOAa5fL5YxSSEq1
      0wSdkQ0GA5TL5fkE4LquelGe52EwGMC2bcVx5ICTuOMi1C91XM/zIr+laUcitu/7ETWD7fEa
      ub1OiHEqjgmB5XXTM6bvJt02rl9ydJ3wbNtGv9+PEALb1pkUMLUROP8gCJS0SEt8tC8AqDUd
      jUYzer+u1+tArp7L5eA4jlLT5ByWBfkedemhay5pwOVEbdvGaDRSBuB4PFY6XxAE8DwvQhAm
      rp7UqURCLtxwOFR9yOtJyKpPutPpKEQfDocRhB+Px6jVauh2u1hfX48dV5ydoovoMAzhOE6s
      mkX1KoloZHvk2pPJBIPBYIZQXdedkVCO4yhuLFUsqdoBUBKi2+3OEEocBEEQsd9MyC8hbp6+
      76Pf72MwGCTaUieFOElNmykNuJZlIZvNYjwezyyU7/vKJvB9X6ktcZ4U6qxJXg5pa0wmE/R6
      PRQKBXVPXNsEXcUid6To1r+Px+OIVJj3AkwIrferE7MEaYuY5i1/o4dIGq5y/pLZULoVi0XV
      Rz6fR6/XUyqHaSylUgmNRiNxzhI4BumBipOE85jfSey6OJAMKwnP0tg9YRjCDcMQw+HQKPqJ
      9EkcTU6e3CPN4C3LQrlchm3baLfbirPJ6yZvjA6FQkFx6kKhoPTtk9gXEjh/EnfcXOL64djo
      RNCfMdkusm/JyYbDIcbjMcrlsvIGFYtFhGEYWTsJuVwOnuelMsjZ/3g8ntH5pfprUvUWBZ3Z
      zWN8SWOOw0uTNiHvDYJg1gjWB6N/1l9SkoFsAulClMhFtatUKkUMUerH88BE+Uk6etr2CL7v
      w7btGRXQ9JyuvlFyyn0KvX3THOV9tMvkeKQRL+0p6RKmdEhDALpaKsFxHNi2DcdxIobtomtq
      YqaO4yj1Ok5tJN7I9U9iarlcDr7vo91uK80ml8uhWCxG1lQRgC7O0hqjpgnFGcnypUjDL5PJ
      KDVM9zfz3qTxSCSLeyGLcinJ8eRnfQ9A7yNOjYsbW1JbwJQwisUiJpMJisWiUpccx8FoNMJg
      MIgQQaFQmFGH0urDg8EgsokGTJGT0kbaCElzks9zrIVCQdkGui1YKBTQ6/WMtgqNfbYjJbHr
      upA2LNslAyBe8J5utwvHcZDP59XYIvsAOudNojKpash7yJVME+G95ISSg4VhCNd10el0Ip4h
      ck6piplAclk5j7QQ17ZJJ3ddN1ZK6kZymj51W4PrQ3uKLtDxeKzWwXVdFAqFyH4AjWqTLTCP
      ifT7/QjhSALkTnacBiD7ptdHMg0ivrQP+X6CIFDOF/2azlTpkpXzIkgvWhiG6HQ6qFarqFar
      ao2GwyGGw6EiAABTGyAO0uirpoGagMjOSZvUkzAMUa1W0W63USwWI89alhVrYJvGvSzHl9/l
      b5LD+L4f4T7sixtPSdze9NnEhHQEAoB2u62QmZJSIsFoNMJwOJzx3Liui1wuZ9w4I5Dw5uED
      r8v14FzpSJHXeH+SJ0rfeNP7lNqCxEW2qeMf22m1WqjX6/A8D57nIQiCmXFEfIpJoth0j8nQ
      0JHbtm1ks1m4rotMJhN5wXp/5Ky2bSvvBvshd4/bOZTcfxngs/Ivrg8iZdJ4FgGKaTodpLST
      6gs3qiaTCcbj8cxONgA0Gg2Mx+OIvkw74LRBX3M5Ll4HouqknJtJqsu151qY2jIZ4vpaTCYT
      NBqNiJqk2zc2ABVnIgehQ9JATdek2CVnossvjgAI1PW63W5ECiUh+DzkXQT0Pk0bLpKbUGVL
      6wUzjTNuPdgHPUlEiEwmo9y8Eij+fd+PXOOanhTkOydCS0SOe7dpmKu8z6QhyHuSVDG5tuPx
      WKlwJnC5kJKKpAGRNIm4QentxKkX8nnem8lklB7dbrcxHA4jlDvPKF5U9zeNX5+bDlIsk2uz
      jbRg0rXld9mW3N2lukBpagp14G5+pVJRv8lNspNA0jvVJbZ+XYJt28jlcsrGiGtP4so8OyZu
      ftT7Tdft0Wg0qxcJdYCD0VUfKZ7iYB4nkCKRnyeTidoBLZfLcF1XGVVS/zRFFc5DxEWM0zT3
      nUTlkiAlDf/odoyTtLprVYfhcKgC40ajkTJSF4V50jpuPvp49escm/RiJfU5bwxxKqtlTV27
      rVbL6Aq24xomx5ineugUKlWfRbkxDZvhcKjcceRkejwJkcSkZ87rwwS6SrKMEa2rA2lBV4t0
      e0TaB7r+HEcAvu+j1+uh3++j0WhgMpkYd4vTjE0iZFwckC7RTBqBCZYhsLh2kq71ej0cHR0p
      jxPB5gB17iIHnqRbz9P90ujmut4XhtPdaYbn8tlms4nRaDSz0SP/J0HSHPSXtegLOckLNCEK
      P1Ma6tJ2PB4r/3q5XFaqIzk9Xcqj0UipalQx9TknjUvnwhL095rUZpxuH/db0jiS7km61/d9
      NBqNyFoa2YcJuaR4ThqwSY9OY5jqC039li8/l8uhVqtFuKxug6QBk90SZ0AtAmkIXe/X9Fuc
      LqyrO77vo9PpKClQLpdRrVaRzWbVzqocWxiGaDabyp5Iu17z7tNtvXlqb9zzy16X96UhFN/3
      I0F6rhwgkVvfTNKRRm7UJA1IwryB6Tu5/C4DxYIgQDabnQmgW1TlMqlL+nPLqAppwTTOJB1W
      VzXknDudDoCpUVwqlSKGsuyPLz2Tyaj9ijRzMhmiaebD301t6vdIgzdt23qbcc+avvf7fWUU
      2/pF3TDVdxGlcSbthHkdp9Xzkri6JFQaNCYbZVHRDsz6pJdRaRbZEzCpF0nczqTqZbNZFAoF
      hGGo1oOeFf25wWCgXKcyHiYNSFU0bmxxf6Z5y89JTAgw7xXEtWnSUEy4N5lM0Ol0pnnfeme6
      KJFb8+xAcn4Z/isXPq1RStBj3+Wk9EXLZrMqpoTuwGXUFh1MLyOJA+l6LddnHneV0pXf5xmJ
      Jo8Qk9QpKXu93sxGj2xX7vYuYudwjWWCfZxOT8ksvYsmxmJimnruRafTUThl2za63S5WVlbg
      +77aCR+PxygUCpGQd70vHag+DgaDaUaYHKhlWRF1RG75A7OqCn/jBNJyegIlied56Pf7EV1X
      F/fyr1AoYDgczgTPyZe7DFFIApzXhv4yGe4ho0bj5ryoygTMRoyORqOIa4/6LfvQVRcaytyQ
      lGNPgrgQCrYvk3TosZJhCnH4YLqmh1jQgC8WiyoFNAxDpcZNJpNIJOwits14PIbLGHpGYtL4
      JEJzW50pkgAiO4r6S9EnpS+wHtZKlUq3J/R8Xb19GsaNRkNxKD2BRE5Wb2PeYs1TSfS2yCjS
      Zl+lBa67zHQDEOGM0m7i3gkRRc6Ru8F8fzoBp5EKcZI9qQKFLk1N62/6jbkOvKaHc+gMN60K
      K9u0Sd35fB6lUinyAqXvWXZkilnRB6Yb0iYktKxptQl9256gh/HqCOn7PkqlEjqdTkRS6GAi
      Bilp5oG0iyR4nodMJqMk0EmRX5dyOoJIe4eMQ6qK5L7FYjGy86kjRhz3T0IaXT3hb/OknWns
      cq7yHtM4khhQXAjGPCKWbboyglAmPeix3zqVLaNiSM4vB2naXNFtCjl4ieiWNU0V7Ha7iRs9
      i+i8vH8eyIT80wKTSjAcDiPlanQpKmEwGKBQKKBYLELf5SdykGEsAgxdkOpTPp9PVXsoTduP
      C1Q4tD4RGZlJjgNghntIsRbHfRfRywjSIKd6Exeum81mkc1m0el0lBFmMrZ0T0qaTLNHDdKm
      MiGl/ps+H/265Iqe50UIVOZ9L8oQJpMJMpkM8vl8KjtnHsj+TZJO//20gf27cQuhG8YAZjZY
      CEliJ06csd9MJhPhpFJlcl034u5MAhpjunQwTVwfw6MAqm9pPEJJ32Vb+n1xhMzkE2kQA4hs
      AC0z736/H7FJ4ko0xoFlTfPAgakBr3uVPqt3I8FlqlqcKAvDUHHYuDIXUoVJo39JgpHPyz5p
      H8jvemK6DnRByqysOMKJ00HjEGRRlYHq5CIEENenvheT9EwYhipuyhQwaHomLYRhqEKLl4l5
      kvaS4zjKlW1a20eN/MqOyefzKBaLsZW/lLvIdSMbKLL+DSENl9YXbp7+l0Yt0A1B07W4tk3q
      h76ZsoxYHg6HiRlYcWAy5HTXc5K3I85gX/SeNONMe59MJaX6xOp2BP0dpPHAJcG85xVzAY53
      FMm1ZAOWNa1x2e12VV0aWXNRcm+TSzRpMEyEN71E02fpfdLvp8okuWSSaqYjv7xXGurs76QI
      cxLQOb4+TglJXH4eQlmWpXBBAvOPlwHJnJhcz7GbUmP15+ZBEoNMQ0Qub6TbrNPpGA0lbjox
      JY+1ZixrusGSlHWjqxr8Pi/HV0fgef0wBl5O/iTift41SWwn4VaEuHbiGEtcG2nVCp3jFotF
      xZWlt2dZw1mfA9NI9TZN40wi4CQJmJbzE2x5IZvNIp/PG7eVgyBAq9VSCeHFYhHVajWxAOk8
      LjQvJ9TUjlQR9OczmcwMcp7UxSbHY5IWckxx303zWASS8qAX4XZxDglgipAPHjxQ1fpKpVLE
      +JbVwZeFbreLXq+nEmEWaS9OXdXBpELG3Qdo1aFt21ZxFf1+f0aHZZIxDyCg353eGqnvyUGb
      xLYJqeTv+kCB41qYJg7A57LZrNrXiFOtTkO/jBtHEvdN8k6l7VeupxyHjtxp1B39e61WQ7PZ
      VKVETgP00iXzPFFpiDgNcqeVgsby6IwZYb6mfNiypqESh4eHqNVqcF0XrVbLGIIb9z2tu0sn
      DPYv/+vt8Xur1UpMAZxn1OqnupjGvgiBnQT5meNr6neRfpK8db7vo1wu4+joCPV6faGy6mkg
      DtlN6vEyhKGDac/ING9rMBiEcR4gUqxlWZESc5wQq5B9+umnyOfzyOfzShKYKDANEsQhpMwB
      AOYf15OEuElgGnOcDZPUBudvIjTLslQVtmUIIokA9Ht4vdvtJhqydHA8ePBAxeDM6z+NKmLS
      AmzbVh5FBrPJfSAd5DpKw/kkKhnt3sSaebY9PYpHr+hFINfngtVqNZWHGoaz4a3s2AS6yNV3
      GimV2Ib8HjdBXdLoXp+455LGlQYk99FVFfYRhseh3AQdaeJAbztpTXldVnvWmRM9Mu12G2E4
      zRyr1+sAoIoU8H3oRX4XBcuyUKlUVBRvqVRCGIYqEBOA8jryfrl+J3FuyDEzAnlu0UjLmm5A
      ra+vo91uYzAYKF2cRuhwOMT58+cVYtJ2iEug1kGfDCMW48RwmhewjCdk3r1pQYZxmMaS1liN
      k0b8Pc0eCu+VmXWyD2k0hmGojN+DgwP0ej2srKyg0Wio8ONCoaBKz8/rW5eenuepvYBCoRAJ
      Y5eOlzA8Lo4gx3oS0HGQhXNTVU3lg71eD81mE/l8XhU7lWmUABbeHo/rb147Se3zOdMGkkmH
      TzJal+V2SXpsWkMuSb1JMybTPfPeTRBMa3WWSiVUKpVI/R7XddFsNtXhKazAHDdG2WepVFJh
      FK7rRoL7TOB5nqoXJB0mprmlwTV93nwH6coGP4Rqtap2WxuNhmqQYcFMTDBxrkWQKMlLQLUh
      KcRAr02pqwpSFYrrnwREWFbkm9qO+266dlr96lWdTf1YlhWJv9I3HXk2wf7+PjzPw97eHlZW
      VhRXPzw8xObmprIDycSA413gnZ0d1fbW1pYxgteypnsSsh6UyemxCBHEvcuFCCAIjkvx8XAL
      7r52u12VN5rJZFL5eXWK5v1S/VnEU8DrjFM3ebD0zxKSpI1pHIuACbnlb1IdYOkXHXhemOM4
      aq15rtc8w1W6hU2Iw70d+Y5N4Ps+1tbWEIYhNjc3sb29rZwfq6ur2N3dVUSUzWaVBNnf38dw
      OMTGxoaKKL1z5w5c18X58+dn7DmWfJHHwHLsumTW5xVHMCZVNNELpMNwOMTh4WFsFlg2m0Wp
      VFKRfjrX0Q1jOTC90BW9T3yOXhPqovrRR7JNVkNut9vRyQrd2YRgOlLGSaIk6cEMO1ZriIO4
      c3dZ8dkUItJoNFTRYAba0ZgGEHsOGnBc5lx3DZPLyyp8plKFcu7yswyTZ5yPVEEZNZrL5ZDP
      51XZFt7T6XRw//59rK6uYmVlZab0CyNbKdX1KoEm6aHPT+KRzsQWkgCZTAbFYlEhlo5UmUwG
      BwcH6Pf7GI/HSrwxd5NuS9/3VXIFk5opMpmYY/LwSNWHJ1rqrlAix6I6tknKpLUXuGdCRNQ5
      6CI2EXVtqYoQePYvnQ/ZbFYh3rxDrJMiUy3LijCLJNA5sak4r+u6yi1OgjDlktM2uHLlCvb2
      9nD9+vWIWkScolrN8Ok4R4YJweXvpne3EAFY1vQ0DxZkkg0z2Tqfz2Nvb0+FTLD2YyaTwcT3
      8fHOAC+cm/qbWe5bUjU3ZGZElcH9Rcmh63dpMrVMi5LE8eUz/E2XQDQg5Ukm85BfJyzqzbKc
      PEOHXdc9Tj4PgcHIR6mYvuw500/1nGAT6M6DJNuF4DgOarWasVJH3EYer62vr6Ner+Pu3btw
      HAfnz59XAXRsxxQ6E6cOmeajw8JGMAdrSozhy/Y8DxsbG4rrs3RFPp+HZTu4tbePVy+vYnV1
      Fa1WS23OBMH0KNZFDL8wDNWp6JzkPK+RyQA0/a6DjhAM7uKBEFwDADMbhmnmIfvneWkMPKRK
      2W63le4f2Bk0uiOMclP1cGVlBZPJRCWcmEDGSsm+4wg+bu6meTmOg3q9PlcSUdJTxeWpMsSd
      S5cuodPp4Pr160otYt+0NWQizTyIIwxlSC9iA7Chdrs9o1/T2AEQqUcJHBdWAo43uDiANIe3
      UafWiz4Bx7qnfhQqxa4+aZP+blkWdnZ2UK1WVQEp5jvIE1d4bCznJNtcFGgDpCXA4XCIZrMJ
      y7Jw9uxZRQhUQ/b39xGGYaIdwFLzsoSILO/OueTz+cjuLO+NI+ZFkH88HuPo6AiO46BarRoL
      brGv3d1ddDodnD9/PoJbJjtUgq7zmxij8noljjimcam28DdKBXkABsG2Q/z6l7/AK6+/jh/9
      1d/g6gsv4Ob1j/Hcq29grRQ9KZ4LIPsz/U6gONeNYtO9ckH0dj3PU8V3mRvB/sl9K5WKyqtd
      XV2dGd8ykPb5bDarkLt19xp+cr2Jr31lC++88x6+88Pfw9raWqq+TOuiqyqy2BkhDvk9z0O1
      WlXSO25eYTjd7W00GrCs6W6wyYnBZ0no9Xod29vbcF0Xm5ubkZD3pHkmzZfzTLUTbAK6zOjp
      oFiTEKU8B2fP1tEfDDEYD2HnyshZQwzHEwDezHOmySSBrCEUd7+0FUz3yQhIWUqcNZLo9pWb
      fycF/QXFJZrr91mZIgrhHVi5ClzXgyXuSwJ9d90kfYIgiLgek7hnNptFpVJRzI81N6WXh3+d
      TkcxzWKxqI5SotfLNHbLmrrUL126hHa7jevXr+PcuXOqFI5+L8cs369OzHJcrusuRwByUUyG
      5OzCjvHur97G+guvoVYsYffebQyQwWQwQhjO1995PcnQ8TwPnU4n8gLks9HxzOqGVOOAqE9e
      V1NO45ihJDCtw8x8XQ+uV8SofYBMvgg35ZDku0qTx62vm1wH1mQaj8cqGpi7w1Q/+/2+Ov5U
      EvZgMFCFuzzPQ71ej+QeSMKhveU4DjY2NlS4tskhoj9vmo+cS7fbXdwG4MM8eEFXKUxGEk/p
      0xeTOnaSHs3fGc3IBYmbIDOZeK8+cfatj3mGy1qzXqfT4PoEeQiIPsY4QxNARH+X80lKL5TA
      qNowDFWY9Wg0UuEJsm05f3r1KO3pqZLIxpRHOgbS2HcAVJotYTweo91uR/ZCwnAabLm9vY1a
      rabwIS6zzPQuOR9JjEtJAAAzolSKFl3s0Ksh9eo45NRBlybk1HEuMYZkmDiELpYl15fXTZKC
      9+gqy7KQNOckuycuPzktcUqkHI1G6i+Xyyl1L1esYDSewA6mhMF02JWVFRweHmJ9fd14HrTM
      GqN3LkmqE3iGLz2M1PP1d9jpdLCysoJmswnf99U+Q5zqa7L35Ho5jrO8CsSIQG7F62qRCSSX
      SlJHiOBSr5dtJxXhZdiv3rYOps0yffzzpJJ8zvQS0hD2vPtMYKp+kbYNetJs21bh0TyBPp/P
      Yzgc4t+8eR/N7hD/9HeuKo7J4MdSqZRqTszf5rtLOqXSVOjAJBGJZ8ViUUUDrKysIAzDmdpS
      emVD9kP8yeVy0/2KZVQgAEoF4mBZNCkJ5KRk9QlOTuql+qIMh0OUSiXFtTlpHQaDgdruj0My
      KaWS7Iq0HD7OK2EidoIkVBOXiiNw7qskEdA8CUKOr/fD58Y+EIQhsm405IL3MywlCfS5s6Q5
      VSmTS1uCfD8kPkoocu+joyNFXBcvXow8T1UtDI+P6dUZlWUt4QYlSAS1rKnvuN/vGydmQgTf
      9xWHoBdAbfIEQeR3TphIk1SihLFC0k/PBZG6YJKBFydSTZAk4pOQlPHucf3FqWEMOpS7zHH3
      ynGQaXBzUt7PZxzbwlGzjWLOQwgPw34XTrYIV3iner1ebKqpSeUkOI6jVCLf93F0dISVlZUI
      DjG4MggCVCoVhQ8kBqrSTNCpVCrwfR83b95EGE73GCgdyVBLpZLql4F+TPwJwyV2guMWmoss
      F5ovSdaCoXpDV6rOfUyIKvsaDofGHU3CZDJRGzncRjepNCbEkdxQcos0+noSIZieZ7zMMoY1
      S9KY+jG1p9duiuPe7aMDXH/nVxhbHkZOAZfOVnDjQQff/9bXlYPBFL4cx8l1psLvjuOgXC6j
      2+2q4DhGfxLpmS5KxKXNQQObREDC2t3dxcbGhhoPpUW/30e5XFbqF2PIaMOeiAAkB2LgEsOg
      qWOSo5siMHWE439T4BQXbl6pQUYQMjOtWCzOjFv2bdL70yJ/Gjjp8yZwHCe1h4VjIOc11RlV
      EAZYefY17N+6hnHgw7Jd5ASxkHlxl9wkgUyMwKTOUQ8nR2eVETlmffzMS+/3+/A8T0WwXr58
      GY1GAzdu3MDm5iZKpZIqumaq8ler1bC/vz9lxKlX0TApHUiN0oA1eYXkpHSxaUJE3VOTBNJI
      ky87TuUBZn3i+pjkNTmORZF7nnG9SDvLVGd2XVfpwyYpMBoOcP/WHTx3cQtdFDFoPcC58xfU
      dZbLoQoVp24lfZfA0O5MJqMMcp1JKrvkoReR9g9DIljJrlaroVKpYHt7G51OBxsbGxGjW+IO
      1ader7ccAZBL6+oKYLboTYthUjVM1+V3iuC43VL+57OUSDJYztR2Ulv6WOV4TGM0qYb6Z116
      pgGpCsj4eKqZSQQp58Eixyaob17EdzelMXmsUkjbTLapv7d5Brlcg0qloqQ0PTymqNEgCHB0
      dBTZyefaMUd9dXUVjuNga2sLN27ciDCJXq+HbDYb2YviOiwtAeQGBP+SjFMTxHk6TPexfS6C
      iQPGqS9EnKSXNk+liBP5cTDv3sFgkBi5qcPR0RE8z1Nz8TwPrVZLqZb1ej2xvzRjnhdglhSy
      kNSP6R3zPoa+08sngcas3HMwMTFZqJkOE/07N/skDswti5IEcScALkIAHIiOkPKa7G9eIrU+
      HgBqY4XZZCag5yCpkJYcD4nRdE0Sn0RI/X6pS6eBUqmEZrOpcgPoKVnkWKbTUL308crUVWlg
      k1ikq5q5CFwf6vEM/ZbjC4JpKU7uQejzkGMZj8eR9ZVl8i3LUmfJyRwLtnOqNoAJ0nhQ5j1P
      UScRdJ7XhW0zDIP5tPIeus4eHpcZadckyk2GGRA9SlbelzS/RZlFJpPB+vr6TEXtpAC/RwGM
      9mVf8szdUqmEVquFaq2G//OvbuLG/Sb+6e++gBwGSoIw0+3MmTPI5XKKmPV3OxgMVE63nq0m
      kZ3raHLJy30Wx3HQ6/UwGo2UY2Q8HuNklWMFpHmhHKg0kCXEIY6MyWc7i/ZPMTscDtFut1Xt
      08lkglKpFCnmleTnNum7Jolg6j+uzXkwHo+xt7enkGIwHOOnHz5QPm26nD8L4PG0RE7Wki0W
      i+oIpWZniJ9/cB/b+x1c256GkTNsIZvNqqpwo9FIMTZ9faRKmsbYl7ZDtVpVREOc40Zar9fD
      0dERut3u1Cu2zCJIipOcyPQyW60WstnsTNaWbvjGEQPbppg03d9qtdQi2LaNwWCAUqmEwWCg
      IgfJOeUpJbJ9KWbjCEyOS449DdeP8z6ZHAk6kEMeHh7CsiycP38e3391C7u7u1HR2csAACAA
      SURBVMrfPRqNVE7Ao5IEHCPrAdHBUKvVInMrWjb+3e9dxa0HbXz7xQ3kcs5MOwDU2E0hEnL3
      WZ+P7inyPC/SBuOX+Lws+c+2+f3EBMDvJiDC9Xq9h6XVA2SLVQSjbmTHbmVlJTGMolAooNfr
      KVVD70/GgBwObJxfqaHZbCjKl+VagHjPBee1zFkH8noSEcS5CZOQlirc2toaRqMR9u5eR9dd
      wTNnV9Tu6LwwlLg5LAJy/LRfmNlGfKDa8fvfuBSRjMw8s6xpLM9gMFB2nY7Q3KhKszb0Jkm8
      kN4k7rjHSZFTsQHiXrrruuh0OurghZEP/B8/uo4//tam0rnlqTQcvMmrQKPJFCW4urp6XBmh
      NUS+kIPnuRHdPKl93Ws0b+FNbtu0kEQEcWDbtuKymUwGq+Usrt1rRnZCPytjWD7LkAyGR4Rh
      iHs3P8aNewfY2lzFrQcNPLtexuHIxasvPKuel84I085y2rk4jqNCJgaDgUrIkaEPei6CDksR
      gOkcrjidnrt1juOgYFn4L/7wq5EJSm5rUgNMqofJy2LbNmwrhN9vwq0XMXm4CxgHce68OD1f
      h5NwUTmPpD7i4ObHH+H9uy08t3VWjWWRNpYdu6kNEiDjtDqdFrqdNsrVZ9G7cR83b+7BrZ5H
      gON5kvsD5nc+j+Ozb1YV8X1fVSpheAVjwuKcGcqdvszEdfGU5MaciiPgg/fewXgyxt/+5K9w
      d/sefvbTn6M3Po4fSkozlARG8Sb/E8bDAQ4f2gP6OGRbwLGb7iSx9UljTQJdAsnv8yJQwzDE
      My9+FX/4u9+fmUtakGt+Gn9S/3ZcD5msh52dXdiOg62tCxgPhpArIpmeab5ksKYwBvmZVaSZ
      mEWuH4bTTDO6aJNwbGEJQBfVImBZNmrlPHwri4sXLuDB7gOMxi28/9E2Xn/+rJqQHLSpX2kD
      mIxKC8DuvTtoX3oWnsW+zepUnB0zT+3RP5vukcQ6j5vpBnAaj4e+RrQB0sQH+b6PbrcbyeFI
      +q/PS//P63RSXHnpdVx5adrXKw/7fO7Fh+5T7Z3JChUSaDc2Gg0V+FgqlSLRw9wc42YgAywt
      y1Jq2fr6+lx1amECYCJCkgeHcHx9gnd+9SbWGn3c/Pg6vvmtb+Lo6BCbm9Ma9DRQ56ksRNo4
      qWM5Dl5+6RW4jg3E3CcRzWTQ0hWqIy4Xm8+Uy2X1QhinQh83wxVkFGLcnE7DY0Op7Hne3BdO
      7qgHCS7bL9eDTgpZ0pIQp+rFHRBCFYZuauYRZDIZHHVGKOQyCMZTSU8dP5PJqJqlEj/1Y77k
      mC1rwdqgbLDZbEa4HK/pwEGwvJ2pPSlNkgxLPaZH9is5Cq9LMWriyDqnZZg1nzfNhVXL6vU6
      Wq0WHMdBY+ShmgNc6ziHgdfW1tZid587nU4sx9XXKOm6Pkbm9iapRd1u91QIgOMjXkiEjlPz
      5LsoFosoFArGcbZaLYVn9OTZto3/5d98iHP1In7wlaraeWbdKeJYp9NBtVpV/elwopxg6v/z
      uL/+DENTk+5PumbS43X1QV6f9wJMfSchWBiG2NraAjDlOtVqdRqJOA6RzziwcNxusVhURBAH
      juOo01FOG7i7Si9NGE597fl8PuIDPw2Q45dh0vq1uHHGHdtkWVYkYpUE/Z/9o9fh2hZc53gn
      Wu/HdJiiPl7LWiInmA+leWkmbn6aL1uXQEC0BkycmmRSh9J6UaTnw3VdtBuHGAQ2CislhG4e
      VnC8I1upVObaAosGD6YFbhgyOciypkWFW63W3PKJiwLXmMXSZNRlEuiODR1k/VLbtrF98xp6
      dhkl9DDOrKB/8Cmq557Heq2oxgEgNl6MEoRxQ5VKBZlMZnEJYBLpJtUi7oXHIYPJuNKvm0De
      m4RsJs6vP7s4hLh27Rq8SyUc2Vfx7IZZlTxNL1NaoFOBQIkzGAxUZYfT7MtxHBSLRTSbzUg2
      l1SJ5B4OEVseni1B5+yr65s4un0bH33wCV751rexfXcHPbuC9dpzEcO40WigVqtFOH25XFbq
      rXR+NBqN5Uojpr1mUlviYBGVKqkNneumbXcZpCxkLDx79WVsrI3R3J0/tmX7WQZ0XZz/eTjF
      PKBNJL1uSYyJ607nAA/HSAIGx+lAQ1b8gh/9+Z9i4/nXsLpWw42bH2M8DtHtHBfJDYIA+/v7
      qFarKJVK6PV6sG0b5XIZnufB9300m82II6NQKCxeFUIWYo3zsOieFN3y5m+LQNyBEmlAciOd
      KDlWGT2Ytk1/PEa+XMbH7/wSR+MsvvbK8whigtL0vqn/mjxRpwVx0pBqQNJ8Dw4Opt4UN4vG
      ADhXnR6ct7m5aXxOvmPWT40zcCXwiCUJw+FQVRwBHhKK4yC0LNjA1J0aBrCs4+JbTHphZEGp
      VFL1Sre3tzEej1XWGNWrfr+/nAqUyWQi0XbyxfGz9MhILkxq5La1vJZkJJv2B3SEYRt0x8mo
      TpN0kiJZryc0D8IwhJfNYjIa4fILr+IyFj9S1TT+tH3zef13k/tRBxYCTpov43U+2R3hX/3t
      p/jnf/INVB/G2M8bi4wNSgLbPq5KRwiC49qk8rdRTBYg++VG18rKCgAodWh3d1fVEwWm+xEH
      BwfKLlqqLlC/31c1WeIGpHNc3suTYei3flRAAiOYxDH1QcuyYvNkTxPkepgkQBLs7OygUqko
      wmX8PXDMHGj0DodDVWEhDljLM05NkarTaBIi48bncOuShgwo6WButk3bgYxxb28v4sUx2RK0
      HegizeVyWF9fx61bt5DP51Gr1XDv3j0UCgVsbGxM5/AwFJrnC/BdLxULRP1OPwOMfzLeX18c
      +v0fhfcjCXj+rRStcoyPejwn1f15/JSMnjxoj/GTD3bw/a+swLaOC0BZ1nQfpFarJToPTGeG
      qeuTAT66eR8X1svYPhrixasX8WBnD2trqxFHh95+EASqlPw8IAPa29tTtgOrRZhUVWDq42cO
      glSzu90unnnmGXQ6HRwdHeHChQtKZe71euh0OhEnDN/5qdYFinM76mI5zvX1KBBR1iTiGWfU
      +eVBzKdlnMYR/knbr1arqFQq6iX6vo/GAOgOJ6hWK5iMR8q9yTBjaePokM/nE09a6fdHsPr7
      OBxWsH3rOsreBG99eA9/8DvfMc6ZqgvPC9CvJxEicwsAM34QJ1h6R2bv8RqlIDcgyfEBqAw6
      k/15KvkAhKRqDfpk4jwKp0kAshYRd5K5GaSHVZ+032Wf1w30OJtAT/iYuveAf/YPXp7elzs+
      MM906ooJ9JAWCe3DXYwL6yhYY4QIce2jT7C3vY9R8B24mN2HkQeLxCFwEhFQc4hbI9Oa6MBN
      WhNhm5jRiapCmOAkCPyoPCBsl4kuTN0rFApotVoRrqBHucoXw+ORklQmaYTr7kP95ff7/VgJ
      QeSKy1JrHz7AW+9ewxvf+y28/auf4/LmKt67fYgffvubaLePUK1WI9xxd3cXZ8+endmjYSix
      SUKUaito7h7B8cq4+sJLuLR1DoNBH64VwveDyLpZlqXye2nXLPIudVdt3PVlIY6xLF0XaFFv
      h8lVanr5p63+6EY4fcN6BbIwDNXmjRyfHE+Sl0i+cL2ujXQJy7HEJfjzPhKj3N0mslXr6zi/
      9gDbn36Co36INza3sHI4hGVbuHbtGq5cuYL9/X1VIvLo6Ahnz56dGXfSRlSxuoqrlWmwYrVm
      YTweqSA/fcxkHvohF2lhnoQ4CehF2SRTWqosCgsNxXFAWummxPcksfgojFAiHtumgcaa+Ekq
      hxw774sbo/xdFo/iM/JwCdMzSaCPAwBuvv8mPrrfwtZZC3t3PsWPf9TExK0iCEOsrq6iUCig
      3W6rsucmnZztUXfWVRo5F5k7IZ8Pw+N8XumVSvIOmuAkiB+GoVJvWQ5Fn4OcH+uGMjl/6XyA
      OB1ecrukl5zmntME6Z2S6oeO2BIJ5olm2Taflf95Tdfx4+asc/s4uPzKN/Dsq9M+X3/9q5Gx
      b2xsYDwe49KlSyrsWdbukW17noejo6NIFGycZNYNe/6nS7tWqyXq8HrfcbahrlrNg1arhUwm
      g79+bwfv3TrAP/j6RazkAhX8Z+p3OBwqh8HSB2TM+z3OqPssET+pGCxFIMuhcMz8n7b2polz
      8vdF5mqSjnHPyU1Bk2rF/3GIJyUiDwekeifvTXMeGs/u1cfcbDYxGAxQr6/iR+89wM2dJv7h
      G5exWrDU+jJor9frRcLXJ36A5hDYWiuh2+moKg/cB5HgeR5GPvC//fkH8IMQrd4I//nvX42o
      arqEjjgU5s5QAxYWZa1G3ZMikcj08uWLYA0e/cjV0yIO1iCKq1eqJ+PL//r9pjmaQOeUpvvj
      1D79RVFN05+1LAv379+H4zhYWVmJhBy0222Uy+WZ8erZYvzdcRx0Op3EqntJ74TvUb/OWkWf
      7HTwf/3oIwDA3b0O/ut/8hLCwFcEwLEwkjQMQ/yLX+zgJ+/dw/df28K/88Y59Ho9NJtN457F
      1FFg4fxaCbd323juXA2lUsloqwBQFQD5+9LnBFer1cgJMYsiLXVjvf4LF3NRQ9s0TrYTN7Zu
      tztTWS2NQSa5vsnGMXFz/R75PJFazpnIKe0YeW+/38fZs2dx9+5dVQ58d3cXQRDg7Nmz6lBt
      YLoJuLa2FruBVSwWleuQRatMalzc+pqMaIYkDPZ6sC0gCIFsxkGlXIbvR/X0fD6vShY6joPe
      4A4AoDcYo1wuK6RldWvDG8F//ydv4KgzxFolhzDwU9mWYbjkRphlWeqMJe7emfS7NIaPnhEm
      P59EEvBZVk9OGkeccarrwHEFWk268bxxpQGZyK3vYl64cAG3b99GrVZDuVzGzs4OfN9HvV5H
      pVLBvXv3sL6+jmKxiLt372JjY8N4rhjH63ke9vb2UCgUZjwnJmakz0MnBKoZVzar+E//4Wv4
      9EETv/X6Bdi2BduOhsAwlJkM8D/5/Vfw/u1DvPzMKizLUrH8UuOwbRuObSGEDcexYY9HWK8V
      4DoWJr4NBBPAdjEZRxO42Iayi5Y9IywMQzQaDVXjXeqNkmvRh64vvF7pjQshkW13d1el7jFu
      hTEs7XYbpVJJVUrWIS62hznNnU5HhXRIr0CcASrb012d8rPOXYk8XJc454FObOPx2Fg0isBi
      r/l8Hu12W3HPQqGgjlHiaSrMT07qm5liXOe4Tc04AuapkCRa3fYyPUvbgWs76jXx7ofXceXF
      l3Gws4MXnn8WH7x/DVdefAnBeFrpbTKZKJf1/q33cOCew6uXz+JvfvRn8DM1bFUs3GyHsJoH
      eOFrb6Benrq8mVtMScO/E4VC6CI76d44ESpB/57JZFQFg1qthoOBjXp2WiqcGUiu6864+ZKA
      YRCu62IQuMDEB8S5WXHqC7mOrqfL+TC0gsnpkjAZ/Md83DCMlgQ02U9xEIZhJNZGj7sxuSPj
      EJcEJxmBhHlprIRCoaAOz3AcC9fe/Gusvfh9nMkO8fOf/RzF1Q20HtxDfWMTO/fu49Vv/CaK
      nqVilwCgUKlja/0ANz74EOurWfzrP/tr1NfPADFq5Lmti2jvT68Va2vwhx28+d5tjLI5eN0A
      H318Hd/6jZcjVabJUJgddqKdYHnYQpzLzGQMU9TpoEsD1rwPw+mx9r1giGq1hHK5nJh5lvS7
      4zioVqvTqnXDAJ5jIetWYlUfftdVnDgpUa/XcXBwoMKxd3s2Aj/AuaqNBw8eqBqlAFCv12fa
      0gnQlEU3T79Nq2bp7RSLRbTb7UiMvqkMvt4Gr9Grlslk8MzWWeyPARSyqBZz6Ac2zm1totNu
      o9cfotHsoLhWVhGsbKvZ93FutYhmr4NMNove0Q62d89js55Te1A8CP2T67dwr+Uj7B9htZSD
      f+Y8vv7N7+Cg0ULjwW14tfPKzqO3j5XAyYxORABxLkZdX9WJgAQSZ0DpC+x5HhzbxsX1zMNn
      HAyHs3sRSQasNCQzmQxcx8GKZwGYtjcajWbEvkT6OBtHjqFYLKLb7aoqyZlMBj+/cR9+EOLS
      mTUVpJXP543VnBdF6NOwk+RasU4PY4rm9aGri2xrNBrg/fc+xqBuwS9ZOOwMkC838esPt/HS
      6y+jVGoDD/umG3UqeUJcufI8clkHuLuDl187i9t37uP82QrGoyF8359uXj0smfLMC6/iGW19
      RuMJysUCipeeV3VTmafM0GlWsiuVSsvbAMDUwGw0GhExJhdTGlPSFiBB0ICelxfguhbef+vX
      aIcOCuEQk+wKXvvKs0ZDjG3rGWQSiR3HwU9//Oc499wr6B/cxdEki2//xiszNYdk+9Rx5fg5
      N133pz4uJR2N8TRlzGkjyaC2OCTs9/s4ODjAmTNnVCFY2jbcFeW5vPOA6iHdhPMI0nTdcRyV
      EGOFYwwmLnIZM5OjIdrtdiMVMnRc4s49EA3Fl6fHZLNZJX1oK3Ie0hEymFgoZI43RU8kAWx7
      WrS10WjEVnSToCNWNptVRmkyEdjIl4q4fOE53L35MS698PzUyhdgMkD168f/Q1TKZdzZvouL
      q0UMx16sWsZnTMZu0jx3797E/sDGa1c2ce32AdDdQ3njWZypFRfi2ibvkhwPDU6WAA+dHN67
      2cJrF46NYXrt5oHuMm632+ooJhY4zmTzGE1C2OFx7VW+e57fxryEXC4Hx/IxGsWXYen3+wr5
      dSnLOY/H45nkIR6tSqO42+0in8+rRBxZyIxE4nkebuwO8eJWGa2Hp+2ciADI6VZWVnB4eDiT
      ya8bdhJ4H70ViRlZ4Rh7D/YxcTLYf7ALr7qOC+u1mbGwXZ1DmZC1VC6jVj6D5oM7WD9/bma8
      JpDeEemSMxHeyto6dm/cwYfXrqM5GqB1bw/jB1387g++Fdu+mu4COnwul8Pm5qYaR3fowzsY
      oV6vq7MReG1RdSkIAjSbTWUgO66L//lffYj7Bx38V3/4KjIYqAy/TCajqjIz42peePNoNJo5
      z0tXkymR5DUppRmhy8jZQqGAo6MjZSceHBygUCigWq3C8zx8c2Ua0OfYU5vsVMKhmYTMM6w4
      gbiJ64hJP28cEQShize++10AwNXLlwHML6Ft0tlVe0GIy8+/DAC4sDktD8IUO/m8HDftnbg9
      D514fvKXf47s+mV0eoe4tdvF689voBOcTjU2OUYiA12m2Szww9enyEC9V5+bDpKwqa4CU28S
      T3YJggCwbLS6Q/SGE9iuh0ph6lIk8pEpyJMsk6Ddbkc26AjcFeZBJzK/XMaakdDk+6CdwHGc
      OXNmSiyTPn7y058gWyyj32njK9/49jRj7iQ2gAQWXaVYksf20OCVYs4kHej/pnhbFsLwuFZm
      nL6uI7juZdHVHhag1dWPOBdv3JrKuJkkMI0/zkVrWRZG3Sb+9E//HOefex5Huzu4+OzzePvt
      t/AH/+gPkXPM5esJkqhlLrV8hgxg5AO9wQT1ciYSZqLbQvS753K5WGfJzs4OCoUCCoWCwhVq
      EY1GI3K6ez9w8aN3d1EpZvHDl9cQ+hO1l2NZVqQWkJ4PDgCuE+LtX/4Kdq6EnTsf49wrP8Tl
      tezpJcTwsAJmGZkqSJv0WJ07ZzKZSHrbScAUC85xSC+UVBPYZ9wRPXFSQv8u0y0JJlUpTkrp
      OQQ6zBiK3TZWL15BybHg1Ms4arfw7NWXkXWtGT96EpiIGQDCyQBvvfMxLj9zBh/dfIBXrl7E
      J9sHeP2lq0YJQ1ejfJeSETGDjHsY1NVpC/IYpvF4jFwuh2sfH+DH72zDdSx875VzyLjA2tqa
      MZyG6Z7cb5mOf4KJ7eErzz4DHw5efXYdw/6SCTFJIAfD/41GQ7m7mJU1HI1x0APOrRYx6ndU
      9V/dU7IoEUiuFaeD6t4eilaKUyKvyd2p66l63yaEjUWqGDeiLo2S5krI11Zxfhji7OY5tFtt
      lHIOdg/bCEMgTbS9dFeb+v7grbfQD/L49NMbyBbO4p23fonM2qVEJkAbpd1uKzWJ11m5giBz
      mIHj8Ah68r55dR07hz2s1/KolzLwfUcRjfT28R0wNurMmTPTC24O3/jGNwAAr7x4FZ1WE57n
      nT4B2LYdCcSiGyoMQ1Xt1/M8/NWHDfzLn17Hc5tV/Df/3m/g6OhIJdoMh0OcP39e+eYXKZ8i
      X6TUbU1qD4G/6xGTJmSI88YkIarsI67tec+b2pNt2l5OFe+tr0x3xi9slQEsnr1ncr1WV1aw
      9+kNWJsvYOfOx1hfXcP9m5/ipZeuwJrDCGRiTRiG6HQ6M7vVJvWM7eTzeeQB/Ie//WLk+nA4
      VO9MjpllY2q1mrpOpsa9ADK7UycA6Z7ioFZWVmBZFjY3N9X+gB8cTQcUTCcpa+lTAmQymZRu
      UjNIlSYOWGkAOA7h1YvsSq5k4vKm36SaFXdNlyx6m7Jtk+SZ54pNS1Qm+0eHSy+8jK0rL8Kx
      bQQvX4Hj2PD9EGEYIP5IwSnwkD9dyszzTPHej9//NX7+9sd447WreO/TXWxVXOTPXMLVS+fU
      vWyHIeR0+/J3Ex5Y1oLnA6SBMAyVW5McXb5ETt4PgI/uNbG1VkTBi0Y7yoEDxycMLkIE7XY7
      lfoka8vQmDMhnNxYWRbiVCSqfZPJRAWUkRB1T0qc2qU7FUzj1PM3TNDtdo/VBq2/uOfici1k
      JOvu7i42NjYUPkhbzwRynTx7gg9v7GK9DLz5yX1Y7T34uVX84HtvwBdSm55BiSfzmMCpSwC6
      5Ojf1wthuY6Die/D81y8fKEG23ERhtMXo1dKIBCRF6kPmslkEpPYOVb533SNv7EkpLyWliPr
      UkBHaiIJvSYngTjJoqtMcVJL3wybx6FNXjXq77zHcZzIu+D9kqnoaymZV78zwLNXL2P72ttY
      ra9i85l17PVt2AACy1LHoLI26CJw6gRA4MncukvRH3bwtz/7GwzsKhBM8NXXXsZb73+C3/7e
      b6pnTYvOicmTYpYF/eXH6Z9pQc5R/ywRMMmzIzPATEa3bIe/8fRN07jjbJW4NZDPmjizLmlM
      a8jfaXuRy9+5cwf1el0dXm1Zx1UvyPT0XHLaf47joFie4srFKy+qPtetqaeRDFbGMMl3wGN6
      ZSqkHOcjIwDArFLY2RLWNi5ipZLH3775AW7vtnFxYzXyDAepwyJEMI9zLQIm7jmvT5Mql9R3
      EAQol8sL6e08nzduHDrzMc1FH0M2m43sd8QZxXFj4r29Xk9pAefOnYtIALZjOt+Yz0vC1k98
      4Zhs256pP6o7XwqFwowmELHrEmd0AnAcR71Q/QWc3TiPs+cv4eL5szhXz+D27Vu4v9+OvLC4
      xabbS88ko4Ha7/fnxiUt43WZBzqSmL6fdp+LjIcwj3jpitavSeSLe0fSluI7oXvb1B5zfU1j
      Mq1XnP0kJQgRn2cRMzCPfe7u7qLb7aLb7U73rE7bCNYn2u12VcYSEDWO9HtZtz4NsoRhqAKu
      uBCMSWH037yt+LRAt5qJk3AsvI+gh0zIOevqEWDe+Z0nxXQJIItTUffWCxjrYyTIvky1jUzz
      lWPVEZDZaM1mE2tra5F++Hw2m8Xe3h46Dys/UKVzXRejwIETTlXCTqeDXC6nwpvX1tZmNAA6
      X6hG6jYHx7a/v6+cDUtXhksLlmWpTCF5Lq0sgUHgizEZiHEcgvEiDMLixD4r0PVgk74ur5mk
      oYnQF7E/CDwtnWvruu609GEQILRcOPCVS5mVoweDQSSbLgyPS0hyTU3z1Z0H+m/cBW40Gonn
      kQ2HQ1W7iJI9DEN0xzb++f/6E/yP/+zbcIOhyuSSJ9JzPPxjaL0szagTKACcOXNmmlgzHOPe
      fvBoJQAH6fs+Wq1WpECTvnCmSnJp25cvLKkWkP6cHEsSSAmwyHO6BJCgE4O+1zFPCuoSgNzN
      8zwVEjwej/HuvRH+xd98gv/hT34DmAzgeZ46sdP3fayurs7YCrq3TX8v+tj03A9g6pI8OjpS
      3F+qULJd2aaSkpaFvcYAZ2o5BIYwC0oyvhdgVnXTCYAbYXQz/8uffYr/52c3Hq0E4GBd10Wt
      VsP+/r7aFY7T7xYlACkJWAtzHgGYXui8PuK4+rzn0vwWdz1OQsQ9d+bMmZnqCS+6Q/RHl1Cv
      lmDhOBpVrgG9Nbo0Sxq3JGDdRrAsKxqGIPqMa9OyLHiei8FgiHyhgPUa4HkuxpYF52GkMIHM
      Uj8FyKRu8t0Nh0OsrKzg3r17cF0XK6UsHPsESfGLgmVZKJVKaLfbM75mk3oQBzJJW3LjbDab
      WO8+DtJwdDk2yS3nEbH+guch9zKGst6OXoVi60wGF9aj5wrIeK1cLhcpdSnnwJ1x6t/z9lVk
      GzLcIE6F1XFg2G3hnbfeRO2ZF/HzH/8F/vEf/B7ev7GNb339tZm1pHtTzp/GryyzQnvQcRzs
      7e2p6uC/da6MV54989kSAKvAmYqsyv9J0iApyYJFYU3AF+H7vlocGp5pOK2u9wLHCR2mwrfU
      xanWWNY0RFgaqXHt68ZqnNRJYhiD9iF+8ctf48Wvfxtv/uIn+M3XXsQv3/8E33zjO8jYx8/J
      kvBsk8hJD02j0VDBgn4QAE4Olj9Av99HpVJR7/TcuWloQrvdVjaJPla23el01FnK/C1jhyiu
      bcE6uoVmb4BekMdaderDJ2Lrej/bZvQns8t0HMpms9NTaDpHePPNN7G2cQ6N3XufHQFI0MWn
      6TphEZUoDMNE9ceyLDSbTYX0ruvCD0IgDBQXpO6slxoxIWGz2VQJGDLvlMlB8qBqugPpHQmC
      ALVaNKstac5JEscEhWoV9niM25+8h71GH16xgs31dWQ8GxCeIeklksgVhqE6UpUEPhqN4Ns5
      /Nmb9/DH331GvUcZzz8ajdDpdLC+vj5jW+jzod3GeYw6R9jf2cZLX30D/9GlryAcNvDBnbtY
      29xCXjN8TeEO0iMo7yUEQYB8ZRVfe+U57DfH+KjZ+ewJIJPJKE9E0uLI/0mgUzr3CHRvEO9j
      fih3B//3H9/C735tCwUrUDmlJvepCdmo0hG5+/2+2sDpBjnABrLBWKX9qrZc2QAAGtpJREFU
      mXRmvQ/pSTIRnbxGpCOSSqnROthHmPVQrJ3B1pk+Pvngfex3fVx8NoBn8EbJcXEcehGAcrkM
      27bxH//etBI0Y/blGIMgwNra2lyJyvcgIVdZxd/73vcejiELFEv4wQ82HjpPzO1xbI7jqFB7
      U2quvH/7QRPPXbmM+3c+ffReIB30Fz+ZTNBqtSI7gvO8QXJxiVzSrhgOh0o1iQMi+dgHPMdC
      EBwjk4nTpo1D4ssgIciMKQk6R6cXyGQHyPXQ63vSxcy0VN7PNFMdgiBQR0SZ2idh6aqabdt4
      cPcmjkYeat4Q+30bX33paoQAxuMxut0u6vV6JHdarg37MKW/6no+x2Va+zCcLVRmWdPwCNOu
      M697nheRHo9sJzgO5CKQc9VqNVXOgshDI25eRKSOXKrcRQLyO46DYNyH5WXRPdrFyA/ROjqE
      k8lFFt5EiDqxmea3ffMjfHD9Fj58+1f49N5eLEKbxj2P+PVx5HI5dRp6p9NBv99Hr9fDwcGB
      qt0v/ySH55/cnNRtEbneBwf7+Oij93Fm8wIyzixH3t/fV8W+5HOm7/OcHknrQCZjciyY+pnO
      0cGfvXUPB60Ber0e+v3+6Z8RlhbIZYjYjuNEDlhoNpuKcxJ0956crFyETqeTeFjDwxGgeftt
      tDb+HqzmET64+QnGHR+VM4d49cXnZu7WkXOeeD+zsYnmrR1U81nc3z/AM5vmndC0kMZDlslk
      IlySZUGA46OQqDuzTmi321VqC708jM7U5xgEAdbX13E4dPHzv/q3yJy5jDAMlTSRezF8lrWN
      ACjng96mXh7SBMQVGWIh75frI6tURPoKgRs7Tbz0TB2V/LFK+lgIwMTVSdVhGKJcnpbM49mu
      wGwgVBx34W5iEliWjbPr62j4PrKZHHK5FWythrh9OHtsUnwbMTopgL/8sz/FmWdfwkGjhfYg
      6rlYBpJsIokEEliziZKi3+8rtyHLC0pDPwyncVQ7OztYWVmZCaMAgK3LL2Dr8vF3HkU6mUzQ
      brdRr9dx584dVb2NhMdT6SUhsiCaqdiYDiwnmcaWolHOihES1/7Lf/K1CDNb+qT4RwmyXOJw
      OFSuOJ2jM8dYtx2SDrMDuDHn4KN33sIwU0Fm0sHa1lXs3bmOq69+FcFoYFxYWRUiyYVJd6GE
      wWBglEjypUvDXVc/4ghomX2DJCBiNptNtXGkxzTpMB6PMRqNMBgMUKvVVHW2IAjw9p0uQgCv
      bRWUYeq6rpqrzLEAjiNAdYJnxTp9fZKkfBBMzy1erVfwdz/7Bc4/9zy2b36M5195GW/+9Fd4
      /TvfRcENHz8B6AilJ6yPRiOlEskFoShvt9vKHyxLdCeB1Hn1l2tyCwJQKoKpfmgcEvL5uPHE
      EQDHKNswIWFSJTu2vwjIucmAwqS9F0ruo6Mj1Gq1aNqo9XB8YaDqEzmOo0rD6JUi9OA8aa8k
      Fk6LgWlUgINPr72Lg94Yz11+Hnu3f41rB1n8wW9/Gx78x6MCSTCJbnmNdfs7nU7kxVKsS5XI
      8zwMh0NjjLwEmafA73FjM22AzQOda6axG9hH2nvjIMlO0Y1a/Tl9f4Yx/frzwPF7olojD0oB
      gNbBfey0AmytZuFnVlDOHasvJvXKNAbT2BeBTCYDxx9gv92HZbt499e/xLlnLmOj/ynu7jRx
      eaP0+AlAB9PL008+50KS85Obe56n8pDnLdiiXNJkcMXBabSpqwFpN8HiiC7Jkxan4lCX14lZ
      jllyfMlIbn16Cw+6IS6uXsDOYR/lcyV1TaqTkbFYNt6/08RLF6oIHh5zNI9JzQM7V8YPf/j3
      oz++8pIy3D93BGB6sSz7NxwOVXwKF03GvrRaLbUDmcTtCIsYpib3YBzom0NJoHuX5JgWQfo0
      bkX533TN9LvujeM4pHoiQ5XJrEaTAP5kjHazgU+3W7h87iX1vNw1l2P3gxDv3z7EV7aqM3Pl
      xlncJmUc4fM0ID1a1LKmG32P3QZIA0EQ4Pbt2wCOiYGx3zIklodgVyqVyM7ostxDwjI66CKg
      V0kGzAhvuh6HwGmNZBMjkKXVdSeEvo8ATO2v4XCoCvI6FjCYhLCDEYa+hVIxD/+hw4IbW0RW
      eUKltDloNxBGo5FKemFJxM7YwU8/uI8XL9ZxvjpVrbLZrArik+vLsJRMJqOC4j53EsAEtm1j
      Y2MDjUYjwvlZNpt5BnTrtVottRssKyQngQmZ5HOn6W0xgcm1Nw/BTV4heW2eES6fS9sHf9OJ
      i7WgeD2wbHgOACeLggeF/ByTJKju0R7efOcDPPf8Fdy4eR/PnKti52iIr3/15UjcUrvdVsh9
      cHCASq2O/+n/fgcPjnr4//7uFv67f/9ryISDSElFApPmC4UCyuWyklRfCAIAoJK1ZVy46QR0
      27ZVlhOTMsJwWodGnh9rgrTqUBKYzvZl21J10EU1KxqYbIFFxqUTwTyIa19HcJ1I9NRVHq0k
      r6eBMAxRrp/BuTM7uLfXwYvP1vHB9X3cf/AAr776ogpVsKxptG8+n0cul8Pq6ipGfoj+cEpY
      Ez9AEFqqCJvuRuYRq7RreP0LQwCWZaFarapzCIDp5FiM14R03GFmffuDgwNYlqXEX1zIcdJv
      bPfw8NDIWbvdLtbX11OndhIYoSohCYnipMOi6l7SHDudjto1NvXH3+XpOXF6uhy3fv3W+2/i
      4502Lm+ewVvv3cfzL1zGKAjg2Tb8hzFa0rtHz1TWnR6p+qdv3sZrl9dw4UwZYRi/33LmzJlZ
      W+CLYAMQgmB64IGplIbjOCgWiyrZmcfnsBaN5HSMA7Ft21i5wgR6QBaP9WH/clEPDw8j5bpP
      GyxrmlvQbDanu7auC98PYeF4l1PW1J+3TxEH/X4f5XI5Un9TD8ZzHAe7u7sR7p+0P2FZ1kzW
      Hs8g0IE5zMBxEB8P4jBJJzkX1hWipPI8zxil+oWRAMCx5S4TLfg7J2nbttryp3uUi0E1I5vN
      Ko7Fo4XmGYzSCGb4s8k+CMMQ9Xod+/v7StI8CmD1vUajif/37QP8+sYe/vj7V7BVnnJgmYsr
      PVgmDq4TAf30+XweBwcHqFarxqIFJET9LLY40BkRYTAYRJDY9C4kQe/fv4Pd9givfOUqBq1d
      /MXffoCNkoWeXcZXzpXw7r0Bvv3685F+4vaGvnAEUCqVVJl1+TsAI9ejVJBxRcCxKC8Wi8qr
      lMQNTcgj45QYZtvv9xEEAVZXV3F0NC0AfNpEQETJ5XKA7eHvPn4fnf4Yb904wKs/fDbVeW2c
      k2lu3GlnxhtdkLxHEgFjjNhOGldtkvEe953ZdJZlYf3cRRx98jGAED/60d+gMQpxYeMFVII+
      /vrnbyLI1hHiefU8K2SYxvaFIgDgWArIVD4iI1+GLh5ZcyYOMUy+7kUgDEMl1iWXq9Vq6Ha7
      ymWbFjHTAvXZP/reVbx1fQ9/8M1LM/HuSUYxVRjpdgQQibHiifTk9KwowecY5xSGx4fRyVwC
      Rag4JgKZtM5Cyvq+gAnG4zGq1SruXP8QH13fBmDje3//d3F7+x6sYQt9u4Lf+b3fw/aDo4h0
      prQ0wRfKBiCEYYh2u41ut6t+s+3paYn1en1mAcNwGvorwykeBZgCx2zbRqfTQa/Xw9mzZ1Md
      k5oW9OAw9s2MO3kNmN1V1pGEhckk3L17V0XnKhsqzKE/BtYLUzukVCpFjimlF45MQa4LuTmJ
      VFb+nudylkeluq47UwJHSjIm51Br4FlhOnzhJABw/MIkUMeP4yDcbHmUBGCSIkEQoFQqoVQq
      nbpxfP2Dd3B75wDVahmdIfDMWg6f7HTwg29/3Xi/aW2ImHpyPGFlZSVSbMpxHDT7PuzBGPV6
      RSXj0AkhgVJXN1rZDk+m5+ntYRjNE9HXU54gRCllKq7G9+w4TqQ6xRNDAMB0Mci1COQmJhck
      y6X3+/2l+9Q3ydICX8xpS1p/PMRgOMKZTAZ3blzHq1e/jWfcaDJ/ms28JMZAvZtqyzRp5vg6
      c7CZwUfEy+fz6Pf7Ko6/UCjA8zwVg0Muzr0dblgySSYIAjQaDWNKKdVaU7VtEipVOBJMHHxh
      CYBx9/qxRkmV4XK53IkIAEgf2WmCYrGIw8PDSDnCk0ChVEaxNESpkMOV567i0+vXMHBquHhh
      E8Cse9DEGJJ2m6muMITAsiz8+u9+iv3OBBurJfz62h38B3/0jxVisz+6Kml85nK5iP9dVrNb
      WVlRm1cSwjDE6uoqxuMxWq1W5D3T6WBZVuyxVlLiU7UzuVq/sARgUoOAqVuT7lDT/XGhuGlA
      Gt1sc5nn53Fc1syXGU3S60U4d+kqzl26CgC4KH6fd4ayBFOUKOfFnVNJKOtnzuCTT9/C13/j
      ddi5utpvkbX5R6ORWmNZMkWHpPWjgc5kfyZGUZowbqrf76vUT1O70i4yMcYvLAEAx6fA6OER
      zWZTxXtIoN6pL1hakIi7jCSYt0vqeR729vYU9+z1ehiPx+j3+zh79uyMThznVdLVAh0hpPuT
      QNen4zgYDAbKc8LCtWEYPlR1bFz6yqtwJkNcuvwMPM+aCf+gLm9ZlipVsizQ60d9X547bFnT
      Yms8ozoJRqORcS/gC+kFkhCG07yAdrsd4XwMg2AciEy3Ozo6MnLUNH1JLj5v78AETDkkckmk
      ZrU0HdEdx8HBwUFsIS29fan6yF1h4JgITb72QqGgNvio++uIrZ//TBdpt9udOdyQlT5KpdLS
      aiP7lePUrwVBgKOjoxl1SILjOFhbW5vVDL7oBEBgFQSp4zPUIQynidJEjF6vh3a7vTDymkKC
      lwGqCazuTB17f38fq6urMyoDEXZ/fz8ScmBq1+T3N7k9TZtfxWJRjWURkK5XhiH3ej0VKsKd
      3nmZessCjd6jo6OZXAMJKysrswXTPo8EYCqhkQbICaRqwJ1gWaXg8PBQ3Z+0AaYjUBwBEJkW
      dbNSt2dg3cbGxgzyy35s28be3h7q9Xqs0ZoWefVcX+rVyxK1idjkZ+n7f1Tg+75yq8px8b1k
      s9kZg/tzSQAnAd/3I+LQcRyUSiXF2SaTCfr9PjzPm1GbdIirasbvup5NN96iQI+FrtObELrT
      6Ri5dNKGV9J9PJiCISFfdBiNRrhx4way2Syy+SL+4q272G308PdeOYet+rSImCT0J44AgOM8
      ACK3bdtYWVmJVGoGpnEscWdUAbMbMbpPXTcmlyWAODARAKMv19bWItLCZI+YCIAFtFiRIa4c
      4xcVBoMB3n33XVQqFfzFe4f417/4FACQz7r4b//oNeSc6YbpSy+9NLXjHu9wTwf08APXdSO6
      HjdVdG8Fywqmffl6MFycGnJaYOrD932jKmHaLDKNjcFt2WxWuVmfFOQnrK2toVwu48ZOU/3W
      H07Q7E/jlOSxTU8EAaTx67N0h44khUIh1k03DzGkp0X+6W2cNoJVq1Xs7u7G2klx/dGHHhcZ
      +SRAEAQqv+Cbz2+o39dreVzerKFer2Nra0vN/wu9D0DQK4rxs26UmvR9y7KU/sujNRdRY3Rj
      z3Q9DcQZ0CZ9PgxDbGxsKK+QKcxbqmX8y+VykWJUTypwb+gHr27i/FoRu40+vvrsGrKupU6a
      5M70E2MD0BdNax/AzHFMTBQxcU5yb31ncR4xnBaHTyKiuH6YGFQul42uU/6nL950BvCTBsPh
      MHLkkwks6/isgydCAgDH4r3VaqHVakU2crgYTKmsVqvG2vTc3NKrD8eByeW3LCzTBtMVu91u
      xObRpYWMknzSwbYtfPDW32FvAHz/jdfx47/8EQprWzi88wGuvPZdjHbfxmDl6/juqw8ToR73
      gE8L6NGggRNXnIq+4jjk5u6lJIY4xInT+5cdfxKY+mHgGePe5Z+cD0OWvxxgobZax6WLzyCc
      DFC/cAU5e4BCvogHdz/EL9/9GNt3d5SUeGIkAIHJz91uV22IcNNHJkt0Oh3jxo9t26jX62qn
      FkCkEl0cnEQKpN1AM9kDJHwGpOljYN3+LwP3n0KAm9dvIFvfwKhfhN+4j/zaeXjZDuqbl/H1
      117E/fb0DIFCofDk2AA6MMmj0+nAdV1l/BBYP4gc3/Q8K0+nNYyXtQcW2UGWu87si/H4Ji5v
      WVZkD+RJB+XtC3wMhmPI18GswdFohPF4PC3//viG+mjBsqbhxPV6HZVKZfbEkIf5rKwwbXq+
      WCyiWq1GOGgSglPfTqsWmWJy5oHp3nw+j06nE2vcp5FgTwooV28uD8uCYnw8x2AymagqIMAT
      sg+QBESyUqmESqUyU9EgKU+YYQKsNZo2VGAR5D9J7I0Mzc7lctjZ2VEJ67L9RfIDnhRgCIzM
      R2bksPQKPvEEQGBlhpWVlYgHiCl6SSATzE/KreW1ZRNrTG0UCgWcO3cOBwcHuHXrljqEIpvN
      xub7PslA24jJ9lI6y3ueWBsgDqgSHB4eKsQul8soFAqxtkCz2VRIxGcW4fLL3DNPjdINYQI9
      V71eD6PRSJVlKRaLuHz58twxP2nQ6/XQ6XTUe+M7dl0XKysrT54XaB7QvZnNZpWXR+qEJshm
      s6osCKXASWsJEXTvkbQ10oRXmFyjPD41n8+jXq9Pz8paXT3xWL+IkM/n4Xkems1mxAnCIMAv
      jQqkgzQY+/1+bLI8QwhqtZqKoZm3P7Ao6CEcshJCXHiEfsyTvCZtg8lkgmw2u1R+xZMAVIUK
      hULkd/UuH9O4HiuYwpb10on6/Y7joFwuo1qtRg50OA0w6adpPElpCCSbzaoxf5khk8koImCy
      PfCEBMMtA7pnxPd9laJo4pZEeNYjom6ZpAqZAtPSGsbzgPfGHRnE//oB2l9WYK0i2noqVuox
      j+uxgQnJk6SABCKWfhBzmudOe0dW2gmL7EF82YDvjLvmX5p9gDgolUrGQrppwXVdVX8oKcTY
      FKJ9WtGj0lBm+3oltS+r7p8WvpQEQEM2n89HNseITHHHFeltFAoF1Go11V4cyDLqsv/Tlgam
      zbUnIc/3UcKXdnXoHcjn81hdXVUFVFl1utvtpsoFcF13acP4pISgP6cTwGm5ap9k+NISAIFI
      zCrI3Dzq9XqxcUL685lMBrVaLVHdkGqKrqefZCdY/tcl2VNbYD586QmAYFkWKpWKih8JgiCV
      FCBwtzUOTPq5vDYv2C5tvoDuUv3yhEEvB08JQIAMmgOOC22l9QwVCoWZDRcdTAarZVn46KOP
      AAA3btyIlPammmSqfanvCJvG+ZQAkuFLuw8QB9z5ZWL1Ijq0bduoVCrwfT82AC0OIVnasdVq
      YX9/Xx1Sd3h4iPX1dfR6PVUVbn9/HwDw3HPPJVbE+DIjP6XhPC/fUwIwAHMJJpPJQnWDgCkR
      1Go1NJvNmTIsQPTFSLWnVCphe3sb6+vrKl2vUqmoM7nomWICj579pbf3ZUL+MAxV9CvDP3q9
      nlpnFgOgw4FraNv2ly8aNC0k7bSmAd/3VTGuONVEIqw8K8uyLDSbTeTzeXUWlryHFZ7pueI4
      9SNMLcvC6urqE+kKpcrHE0MZ2MhiCHHOBukwcBznKQE8SpAlGk1lFnUurZc3TJsnTE6nb8jx
      wLonTRqEYajOgZCSkMlL/M6zxNrtdqzL+MljDZ8jYJ5uXJ6BDmnKG0rQr+venyc1FZL2EpFf
      bkryLAjbtlUhZFOwITB9B09tgEcMnucpCaBLAXqATIhuCnOeByaCmHcqzRcNpPeMOQ9SzydY
      lqUCG3mCKG0yx3GUk+IpATxCoOFFRDeBKaZfxvmYEl/mRYLK9nja+5OgBlH1GQwGKBQK6twH
      rhXL4DDWn84MPst9mjAMVTTvUwI4ZdA5bi6Xw2AwmDlaSIIJoU1ZYCaDTt8N1u/h4XCfl5Bo
      aZzGSb4kYmVEp+ne4XCI4XCI1dXVmV15XToUi8XpUa0nndBTiILpdMpqtarKcZg8QhJ5dURP
      iiA16bQ68LT2x0kAMsiQSMp1kMkplmUlup3n7ZaTONJIO8aCPSWAzxAWSXYxgXyxcZlg+r1x
      O8SPGsJwWmiYRahkCqccm2QKLOK7DFDnXxSeEsBnAKwuNy+8Os4WMN1rsg9MahP7P+lJjYvA
      ZDIxHkjCMUpJpxPtZ22rPCWARwzkciaQon8ecZiQ27ThI++Tp7cPBoPPrEboYDBQXhbplp2n
      si1zQuVJ4cnxj31OYTKZpPLHJ+n4epy/vJ+eJm7zm9SkIAjQ6XTmSqHTAlOZmXnIX6lUkMvl
      PnN17SkBPGJg/f44nT0MQ3ieh2KxqMqY60icNkPNRCiSCLhz+qhhUbsjm83OJKt/VvBUBXrE
      kM1m1WaYHqPP78PhMBL0xmsS4RkmIVUfCXGIL3XuyWSCdrut0kAfhboR595MAp5a+Tjyl59K
      gEcMLNI6b7eXcStJSTOmpBpdzzZJAXnfYDBQgWOnDYzKjCsyZgK6Ix8XPCWAzwDy+bw6uUbn
      /mnjfaSxazrAO8l3rl9j6PCjgH6/v5D6E1eT9bOCpwTwGQB91HoZFl5Lei7t75I4qIbohjER
      81EYw3KzK60KZFnTCn2fheqjq5SEpwTwGQGzxVZWVtSxrLovXPfoAPEbXkQ2aeSa7o0jlkaj
      cWoeF46l2WzOPaFRf240Gp3KGOZB3B7DUwJ4CHEc4rSAyJ3L5VCpVFCv12dOqpQ6flojNa70
      iR5OASDSpu/7iYeDLALLIL9lTfMXGL78uOCpF+gxAKMUPc/D0dGRMVDO933kcjllHMtnTWBC
      eOktMnmN+v0+hsOhOv2mUCio6Mq4PnjMEDA18JmVljQ2vV/P89TBHY87SO8pATyExxEuzOCv
      uLRJbqLJ+02uTqlKSaPY9J0qltwlphoyGAzUYSFsj0F8lE7Sg2RZ0zh8GeuTZs57e3u4ePEi
      stmsCl1+XPA0JfIxA5FsMBio/NYkdSyJAOQ9OuLzfnL6fr9vtDN4XXJ6vb+4sUkjXAee0Hhw
      cIB6va7OXysUCo9VBXpKAJ8jIOKPx2P4vg/f99FqteY+p0dYJqkwJAJmSs3jvvKQOT3+SB+D
      JBr9erfbheu66sQWnsD5uOGpCvQ5AiKYzGKyLAvtdjvRY6OrP/NAFuSaZ2zPi+GR0Gg0VDiz
      3qbv+zh79qyyZz4vTPcpAXyOwbKmmUue56HVas3dwCIRSM4+D7l1j5Ou5iS5YwlMauGpjCbw
      PE+5bR9H2HMcuNLD8BQ+v1AsFtHtdpVBmqSHy//zEI1EYLItkp4h2LaNw8NDBEGAfD4fUZkI
      eriDZVkqO+xxw/8Pf7ujmUxkj6wAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Late Customer Distribution' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2dSYwjWXrff7EwuO/JJHOvrH3tTd0zgMYCLGuzBEiGNGNDMOCDT/bFknyR
      YXgOM777YkM62ONFR0OSYRs+2ZA0bWkkj1rTa+1Vue9MMrkzSMbmA5kMLsHqyuqqnJri+wGF
      Sr7858fvfRFfvBcRb5Ecx3EQCKYU+cftgEDw40QkgGCqEQkgeG1o1iucVGrn+p3quX6bQDAJ
      u8WHH/4/3v3ae5RKFtgWu9sbGHqNE2WW1biDP73I4fYmfk1heXmBje08C7MJDBTms5kX+lqR
      AILXA9tE8oVIJwJ8/NE9jE6DykmZmdwcuVycnY1NDh7skgt1aEQX+Os//F+kMrNsbZv87M//
      0gt/rSSeAgleFw6316g7AdqVPPH0LEd7e6xevcrhURGfVUdLrRCkiewLYRk6W7t5FpfmyGVn
      X7gvf24J4DgOkiSdx1cJBM/Nud0E27Z9Xl8lEDw34imQYKoRCSCYakQCCKYakQCCqUYkgGCq
      OVMCtFstHMehUa9j2b3/HQcch0a9hu041Ot1bMukqbcwLfNV+S0QvBTO8CbYZOPJUxZWF9ne
      OkCSbCRkgvE02ZjC1k4e0zTQfCpNvYOsaWRSKRbmc6/Oe4HgK3KGBFCZmUlg2waJdI7CwVNy
      Cxdp6DqWqZLO5NjeeMTC/GWqzRZ6rUb+YJOOI7OcS2NZFv/y3/8pj3aKfYu//a2vEQ/7+dd/
      8Of9slwqwu/9zt/lX33vz3i4PaD95teIR0a1YX7vd37ZU5uI+Pnuc2h/65sfkIwE+e4f/N8x
      7be/92c8GNVGg3z3v7jabDLM7//zX+bb//H7PNgquNrf+IBULMh3nkP7z37jA9ITtIJXy/Mn
      gN3hqFAiIc9hNApcvvEW+d1tcgsLWI5Eo7jLrbfeYX9nl+XVixhtnUb1hEA8jqIoAGNvghVZ
      RpGVoTJJAlVVgWGtrMh9O65WQlXVMbuyLCOPaMFbq8gKijLaE+xqGbOroMjD2r4PIxZkxcOH
      Xt084zDm72kcBK+S54+wrHHrzp3uz9kZAFYvX+n/Otr7+fKVywBoaphwOPyS3BQIXg3iKZBg
      qhEJIJhqRAIIphqRAIKpRiSAYKoRCSCYakQCCKYakQCCqUYkgGCqEQkgmGpEAgimGpEAgqnm
      zMMNjWaZ+092SaUSFAt5ZhcvMhNRuP/gMfFkinKpRCQWQ+/YzKbj5LLZV+G3QPBSOHMCSIqG
      qsD27ha3brxNuVqhpcosX7rJ2uPPuHn9Jjv7Bzhmh/zhASgBMskIlmUxugaXZdtYtjVU5jhg
      miYwrLUtG8sa1TqYpjlm17Zt7BEteGst28KyRtcs6moZs2thjaxv1PdhxIJtefjQq5tnHMb8
      PY2D4FVy5gSQVRUFm6vXbrK7vUZucRlHUdjffMTS8kXW1jdZuXINS29QK+eRZUnMB3DNivkA
      rxlnTwBF4/rttwDIpJL98vhb7wCQy852C0J+UunUS3BRIHh1iJtgwVQjEkAw1YgEEEw1IgEE
      U41IAMFUIxJAMNWIBBBMNSIBBFONSADBVCMSQDDViAQQTDUiAQRTzZkTwHFsttbX0Dsmu1ub
      dCwHHJudzQ0My2JrcxOjo7N3eIze0l+FzwLBS+PsE2JaVaqNNtWHd0ln5tjZ3ScbV1ECET77
      0d+wtLLCJ5/eRwv6aTWqLC5fwKdIvX2CR8fXO9jOyFh8h97Y+GGtYztjew07Pe3o+HrHsXE8
      9iW2LGvULLZjY9ujo/kdz/H5jmNjj35XTztmwXbGfZjgr+2M163vr+CVcuYEcCwTZAWrY9Fp
      t5FlBduBTruFoii0W21yS8vQaVKtFNk/KrAyn/HcJV6SQBodSS+dzhuYVD5qw0srjY3l72vH
      zEoeUsn7u8a9RcLbr2f5MGbjmXUTvErOnABaOEUm2SIxc4laqUAyncKwJELtIkvvvkchn2cm
      O4PZMUjEo2jhOLIs9656wwdUkrxPNFke75l5aSWpqx01IU04gZ/X7iQtnlqp68O4dFzb83fU
      4bP4K3i5nH1KpCSTm18EIJDt7v+lqhDMdX/O9v5X/Bp+v5gQI3i9EZcYwVQjEkAw1YgEEEw1
      IgEEU41IAMFUIxJAMNWIBBBMNSIBBFONSADBVCMSQDDViAQQTDUiAQRTzZkHw5ntBg8f3Kct
      hZAMnfT8BbIxhXsP1wiGQujNJj7NT9uCuewMi/Nzr8JvgeClcOYEUP1hEqkMwXAQCFCt1zAM
      lZWL19l4+gXXrl7nuFRGbugUjvZwZI35TEJskNE1KzbIeM04+w4MjkMkliQeDfHkyRNyC8sg
      SRR3Nrl64zZ7O7usXL6C2WpSLxcJhoNigwzXrNgg4zXj7BGWJBKJOABXr9/sF1+7cQuA+M0b
      3QItRiwW++oeCgSvEHETLJhqRAIIphrRyXzN+dGjfUr1Vv/zrQsZ/D6Vj58c9MuCmo9v3Fny
      1moqHz8e1Kp8487y+Tj/E4BIgNecP/rwAfc3j/uff/tbX2cmHuLf/fFf98uyyTDfuLPEH3/4
      gHtfop1NhkUCDCC6QIKpRiSAYKoRXaAp5X9/tEa+1Oh//unbS1ycTz7jL95MPBLAGXoz6vWC
      RvCTz/c/2Ry6X5ifiYoE6GLz+cd3cbBAknjv/XfP3yuB4JzwWv+PRvWIg/wBDUusTSl4s/FI
      AIdyqUoikSAei5y/RwLBOeLRBZK48fZPkYj5WN+vnL9HAsE54vkU6N7ffJ+DisHP/NKvj/3O
      tjo8vP+Q2fkFDna3mV26TDosc//BY1KZLIXjPMlkknrLZDYdJzMz88orIRC8KB4JIPMr3/qH
      7G5tsLm/xc3VzNBvO80S1aYFhTxLK1coVys0JZnF1eusPf6Mm9dvsrWzh2EaHOzXQfGTioXE
      fICu2TPPB/Cq21gcnqG17VEfTv0d124dlvgff/G4XxYNa/yjX7gz5tebhOdj0Mf3PqdQ1SkU
      G2O/9QUTxMN5AlqQ7c0nZBeWsCWF3Y2H5HKLPHm6zvLla1itOtVSHtOyxHwA1+yZ5wN41W0s
      Ds/QyvKoD6f+jmurzQ5/8vFGv2w2GeYf//K7/P5//4i1vVK//Dd/7hYfXF8Y8/cnEc8u0JVb
      b3PJdsaDByiqnxu3T68KF/rliXe6z5CXlrp7BxANkskMtx6Cn0x2j6s83Tvpf642Oz9Gb14u
      ngnw5N6nlFoSQX+A9959s5tAwXTj8RjUZv3pNuuffUTd8Z2/RwLBOeL5GPTmO+9hWiaKIhJA
      8GbjeRP8xUc/5KhSIz6zyKXLq+fvleC1p9ZsD90XaKrCrdXZH6NHL4ZnC3Dp+mWuhFJcunjh
      3B0S/GSweVjmO//5w/7n2USY//C7v8rRSZ1Wx13OJR0PoSoyRyf1fpmqyCxkXo8FEzwT4MLq
      Kn/5gz/n3uMt/v6v/p3z90rwE8u//eMfcnfDHWX6W9/8OrPJMN/+3p/2yzKJEN/73V/7cbg3
      hmcX6P7du8xfusVbafEWV/Bm4zkaNJ1O0mw0yOePx38tELxBeLYA2zuHNGoVstfEXADBq+N/
      /uAR+4Va//PffvcC15fPt9fh+SLM0ivsHhVQM9VzdUYwXfzw/h53N/L9z1cWU69HAsjBFP/g
      N3+OTz65d67OCASlms6PPNYx+tHjA0o1vV/+M3eW8WtffUq7p4V0IsS9e/eJJtNf+QsEgrOw
      d1wbWscokwjxjTvL/LcPHwy1Fu9eyb26BFi8eJ30TMrzDxzb5PGjh8zkljjJ75NbvkxYg7Wn
      T8ktLLO/u0Mul6VYaZJJxYhGo1/ZSYHgVeE5Kf4v/uT/kJybI5rK8e7tq0O/tYw2pUqdaKJG
      Mp2jkD+CmEpiZoGH9z/nypVrrK1vYiPRapRZXr1CUFPEfICu2dd6PsBYHCbF1xqPmdOP77AJ
      27Y8jsUz6jbm74SYmRbr+yfsHrs30dlkmItzcf7q/v6Q9v2rOQ5LDU+t54SY5QsX0CIRgpHx
      OcGSLJNOxikcn+DYBRIzs3Rsib2ddULhGFtb28wtX0QyGhTy+xyflFld6L4iF/MBXu/5AGNx
      mBRfZTxmUj++wyZkWfE4Fs+o25i/E2KmKvzg7gZ/9P37/bJf/OAi/+TX3uff/Ne/GtL+p3/x
      a/zl3V3+cED7C+9f5J/+vfe93wTPZlN8dvcB4ZkVLq7MDzupBrhw8TKKqmL3Jrs4DsTjaRSl
      e6XvlsXIzGaRZLH4nOD1xXsw3Mc/wvLHCfjHR4NKkoTP1y2XezuYSBLIcvdndaAMxKJagtcb
      zwRYuPgWYPX+CQRvLp5doJOjTYr1FuFkDjEfTPAm49lBDydn+fVv/jrJsJgQI3iz8UgAmWTU
      x4ff/z7+uHgRJniz8XwPcLB/SKXWRAl5vwwTCN4UPNcGbbc6tBtNFJ92/h4JBOeI51CIuZWr
      zK1YjL6NFQjeNDwT4HhvjXylQWxmgZteAoHgDcFzKEQ4EiKuxfn5n/3p8/dIIDhHPBfGyh8W
      yG884a8+fXD+HgkE54hHC6DwK9/81vl7IhD8GHihkWqdVpO2YXFSKGDaDjgOxcIxlm1TLBQw
      zQ6lSo2O8eYsoip4MznzlBrHsdl99Cn18BJhyaCim2TjCuVKnZ2dHeLxOBtbO6h+jVQ8zsLC
      ArJEbzy3M2KLsXHp3XKPp0+OR7lXGT2bXuUTtJ5f513o5S2OR3m3uhP8HSl3Jvnm5cMztGOl
      HjF/5t9PioNH5ca13nHgmcfixc8Hr/g6zzgfJtX5zC2AXjnmuNKkdHJCKBzBsS1s2yYUiWIY
      HSKRCDPZLGFNo1Q8ZHs/j23bE04SB8ceP0ls22Y8OPZYJRzo2x61a49V2OlpR0ptB8cZnxBj
      26Nlp/6OTohhonbch56/XnYnaMcP8uQ4jE0ichzs0fj2fRiP2VgcnGfEwRmdEHPq78h3OQ72
      WHzxPhZe5wMTzodJx93DX9t2vOtr22dvAUKJLF//6TgNU6F4sMvC/ByGLdEp7fH2e++zv7PD
      4soFOq0Wei1MIJ5yN8gYm4QhIY/OF5BO9yYe1kqyPKaVetqxiRXSuBaknna4VPawe6odxduH
      nt0R7bPqNu6vh5ZeHEa0kkfdpJ7Wa5LLJLvPpe3VbbRynnGYFF/JY1IOE+LgFTO8zwdZkcfm
      msiy93FTZBlZGj9usqK84E7xaoCwCuHV7sK5fiCyehGAC70yNRQkFAq+kHmB4LwQ07UEU41I
      AMFUIxJAMNWIBBBMNSIBBFONSADBVCMSQDDViAQQTDUiAQRTjUgAwVQjEkAw1YgEEEw1Zx4M
      Z5ktnjx6SiyVoVQ4JLdyhURQ5uHDh2Ryixwe7JOZmaHc7JBNxUilxNpCgteXMyeAovoJaDLF
      UpHFpUtUyiV8lszc8jXWHn/Kzeu3WN/cxrJt9vQqqAHiYb/YIKNrVmyQ8WV1O8MGGaNj/227
      d9xGsKxxreM4WKZ59i6Q2WrS6NhoqsrW+mN8morpaGyvPSCVyvL4yVNyS6vM5bL4FYem3kJR
      FM/x32KDjFMfxAYZfR/OsEHG6NwBWZb6y/MPaZVxrSRJKKp69hZADYS5dev2WHkqNbqOaJhs
      NntW8wLBuSJuggVTjUgAwVQjEkAw1YgEEEw1IgEEU41IAMFUIxJAMNWIBBBMNSIBBFONSADB
      VCMSQDDViAQQTDVnTgDHtthce0K1obO5/hTdsHplT2m1O6yvraE362zvHdFsNl+FzwLBS+Ps
      CYBNIplid/MpgXCCg/0DGtUCgWiKLz77mFgsxt17j8jnD9nZ2UHvmP3x2J5j0CeM/x6bD2Db
      2KNj0CeMFe+Og/ce4+89Bn3SfADGtF7jyj3nA3jNSXiGv5PmA4zPSfDwgTPE4dSHrzAfwPE6
      FhPnA3jMSXiGv2PnA97+WpY9tleDbTuecbTsCfMBLOvsCWCbHTa398nMpKlWSsiyjGlDtXyC
      5g9QKpWYW1llITuD2WlwmC8iyzKSJI2NQfdaZ37S/gBea/7318X3HAc/aX+AUR+81qT3Xhff
      a/36/h4FIxY89yiYsD+AZxzw3h/Aq25nioM0YX8AT38nxMxjPwPpDDE7rdvz7dXg7a/SO6e+
      zK+uVhnbS6C7r4N89vkAsqKxMJ8lGInh94cIRyNYNmRlP9H4RaqVKrF4HMuMkYjHUf2h7sk/
      Wlu6sRqt2KlzE8RjZZ7aCXj74OXBJLveZZP9fb66SZPKv2LdzqSVPN2doJU8Q9G9yHkYnniM
      vY/H8/o7vnnI5DhMKn2BBPCRmZ3tfggFAFAU0BIJABK9/2Wfis8XOat5geBcEU+BBFONSADB
      VCMSQDDViAQQTDUiAQRTjUgAwVQjEkAw1YgEEEw1IgEEU41IAMFUIxJAMNWIBBBMNWceDGdb
      Bg8ePuHyxWUePnzM7NIlZiIK9x88Jp5KUzo5IRaL0+xYzKbjZE8HzgkEryFnbgFkxUcqGaOh
      N1lZvUq7WUfXayxdvMFx/oCrly/RMQxso8XRwT5HxSqWZYkNMrpmxQYZX1a3132DDNtsc7C3
      T0M32d1eIxwOYssh9jYfsbh4gafrG8wtrbC4ME8s7AcQG2S4ZsUGGV9Wt9d9gwxZ9fPeB18D
      YGlhvl+eePsdAObmct2CcIB0enTTDIHg9ULcBAumGpEAgqlGJIBgqhEJIJhqRAIIphqRAIKp
      RiSAYKoRCSCYakQCCKYakQCCqebMQyFOaTfK3HvwlPT8BbIxhXsP1wiGQujNJj7NT9uCuewM
      i/NzL9NfgeCl8sItQLvTYWX1CrbRwjDarFy8TqNe4crlS4SjEYI+hcLRHjuHxZfpr0DwUnnh
      BIjGkhSP90inEuCLUjza4uqN2+ztHzK3sMTy8iKz6TSRcPBl+isQvFReuAskKT6uXr/Z/3zt
      xi0A4jdvdAu0GLFYDHDHY3/t+hzLs9H+32STIYKaj198f7VfFg8HME1zTJvz1PoxTZMPrs2x
      lBm2GwpM0F7/cm2sp/3aiDb3DO0H1+dYHNKGJ2uvzbE4466cnUuFCZ9BG5mgff/aHAtfoo2G
      JmiTISIhzVP7wbU5FtKudu4Z2vevzTE/qE2FiE7U5phPhwe0YQ+t5qn1yRKX5xND2hvLM9i2
      NVQGoCoSl0a1K2ls20JyRmcavCIsy0JRFBzHwXEcZFke+hnoT3qwbXtIezoWfPRnWZbH7A79
      XpKwe2WSJPW1PUF/SshZfZBlGRwH+zl8OF0H/3Q4+6APtm0hSfKIdrxunv4+o26jds8Sh2fF
      tzv1ZvxYnGLbNoos9+w5dDsYzph20IcXPcanx+eU0/K+1rZhpL6Dp/pp+bklAACmzhcPN0nE
      glhygAuL3bkD5eIxzbbB3sEB77zzLj5FBqPBp/ee4kgQjaW5vLoIwNb6E04qdWxZ5Z07t1Fk
      aUgbiaW4sroEwN7WBrv5Y0KhKDdvXO9qrQ47+3kURaJYaXDnxtWuDyfHNFsGeweHvP32O2jq
      qQ9rOJIzZHd/a41Gx+agWOFvff2nkCVpovbBvS8IRmIkUxni0VA3Dp0qG0cNqifHhGMJLq8u
      j9Xt7du3UZVBf2WK5Rp3bl4DYHdzDUvRqFVrXL9xA1WWhuyGYgmu9OzubW+wc3hMOOwVB5lC
      ucZbPbunPjiyyp3bt/EpEpgNPvniKYpPIRiO9e1urj3GkjRk2WF+YQW/T4ZWmY0Tg0bxgEA0
      xeUL3eO2sbmJX7I5qurcvnmzZ7fJZ/eeYgORaIIrF7t2t9efUBzzocnHnz/Br5ikVu8wF9MA
      ODrYw3IkDvIFfuqdtwCoFg/Z2NrGQOPS9dskQ2rfB7PVxJA0bl67DHyFLtALISv4FIl2u004
      Ee8X27ZNMp3BtMzuyQSg+PD7VGxJIhDw97UBvx+fr40tDcw+Unz4FBlJUfD7A32toshEYklS
      UbfpRFZQVR+ZmRSmfeT6YA364Nr1+xRknw/N5+trc4srHOxukU7PuPOqFB+aImEr6pC/oWiM
      xYVFSqUSdjiILEvgC2E0drAdh1jMjUMwEECp6/i0gFu3nr/pVBx7YBZXwO+nohtIsuLeyPnC
      mI0dTNMcsqvI3TjMxMPulMWe3WQyzuBkwVMfFC3gxkFSmJ3N4g/6aTYabt2CYaLpNE8ePUFe
      7BWqfsxGnnAijW/gCh0O+NjLl8jNJAfqpqKpCrYsEQi4xy0QCKDpHQxHdrWSTDIzR1xtYQy0
      Jo4kk0mn6AxM0ZRlBVULsZhNY5huuYJFRw0QDWiulvOkXUONJmnqbeq1er+4Wa+wvbnOxt6x
      G3TbotHqUCgWiUTcE7jRbNJptzFMA/v0YFodOqZNyzDRdXdnynrbJOaD/cKJOwPWNtFbOgcH
      B5QqIz5srbOxm++epACOgz8UJhQIUK6U+9pSsYAta9RKxxiW07droJKKRel0jL7WbOlsbm1T
      qlYwTx1uVSg0bBKJJKlkrK/VdZ3UTAbbbLv+tio0LHj06DHNVqevLTfbaJi0DYNTFzB1qg0D
      RdMol0pDcYhrsH984s4Ftgz2D/b54UcfEYm6ydJqt2m22ljGgA+OTeGkREev0xmYsls4KXB0
      cMD80go+tXcqGS2kQJx6uUhTb7t2dZ12S+e46PqFbdNsdygUikQHjnFd7xD0q+BY2LYb39LJ
      MYriUKm3+tqT/CEbjz6nqA+eyjaGo3D34VOiATcJOxY4nSaVmnuOnG8C+MLI7RqRRIpoxH06
      tHjhCn7ZIjubdfuKapCbV1aQ1ACJ064DEA6FCEUihMPhgSu1n3BAIxYOEQy6V5JEJEi5ZTOb
      iA5d1SOhILPZHNlMasiHgGSTzeWGWqFwKEQ2O0tmxtX6fD6y84tcWFoYsKsR9itUKmXCEfcm
      MJlMsrAwR/mk4mplHwsLiyzk0lQHLgSxaJRatYLmD7laXxi7USI5myMycJVMRsMU6m3mM+mh
      ui0uLnH54gX8PvfAJ6IhSi2bTCLq1k0NcPvaJSTVT2KghQwFAwRDEeZyA6t5KBp+xaHd7hAO
      u9pYIsXi0goqJtbpiaqFcJplkpkc4YFjEQoGCYYi5LIZd70DNcDNKxdA8bvdQyCTjFIuNwiF
      I91uYE87n81QLJaIBtzW+NqNm0iSzGw60S+LJLOszKUIRxMENTcOQU1B9YeIRd3jc85vgh0K
      J2W2NtYJBN0Krz95iBadoVU7cQNp1Hm4cci1C3M8Xt/pa/PFIgG/RjKRdDsEjoXs8+PXNE5O
      TvracrlMq1ElX6rQXxTAaLK/t88nn39OXXdXENhYe8xBqU6rOuBDp8Hu7h6fP3hMZaC1aLdb
      HO7vsrG967ZCnTqW7MewZcrFQl9bLFXY2dzE59dwTj2WJQp7m3z+cI2jo7zrb7VKpVqj1ay7
      du02Nd1EciSq9UpfW61WaLd0DvPHA1dqqNUqlE5OKNVqrt1SiXajynG5gn3aBzJbfH7/MVan
      Rbnmdmvq9SbNZp29/UP3RDV0Gh0bXzBGpXTc1+r1GltbmxwWCpinXRCrQ1U3wJGoDfhbq1WZ
      mUlxcHjk+ms2eLh+wPWLCzxe3+5rD/MF4qkETq9l7/rQYL+o09RNOgN3rU83tjAkjfLhlluH
      0hHru3ka1RL6QJNVOSli1PIcN1wDyne+853vcF7IPjKpONVGm9XlBbcYh1qjiRYIkkrEu62A
      rNBq1DBMi1Q6Q7DXb7MdiaXFJSTHwufT+lpJkshmsyiKTDjUTS7JsXBkFX8gRDrZsyvJ1Gs1
      5pdXCWoyoWC3JXJMA3wB5mdn8AeC3SulrKA3GoTDQWLxFJHepoCOZZFIzxINBwkGQ12tqqFX
      ihimzfziMgF/9yoV9EkUimWiqTSpeLTvr6dd0+hd6WYI9H1Q8fk0In4JA41ELNLXOmqA+dyg
      theH2SzqQBxkbBxZQfOHSKcSPR9UMunTY7HYPxa21fMhN+5DNCBh4Ov7oMoSqUyWaqlEOp3u
      dh0naBUJavUmmj9Aqn8sFNqNOoZlkkxlCPWO8andSqlEKp3u3rQrfjrVYyzZz/LCbLcMsDo6
      ki9MKh7tt05aMEIkoGLhYz47069bOpNBb9RJZheIBNRebM4Tq8WT9W1m4mF2DtwrSbPRQJZl
      Wrru3qQ5NsFwlHA4wuHRgWvD0Flfe8rHdx+7ZabO9vYu9x7cp950+531eoN2s0Gj0XTt2iYt
      0+HB3c9QfO7NarvdQrEN7j7Zcm+82nXUaBq9XkfX9b62XK1zuLPO1u6hezWzDOqNJg1dp9F0
      tdVqjWanTbNWG/DBotNuc1w4ca+cQKfToXRyzP5RwW3dLIOjoyM+ufuAeMxtupttk6Bssrlz
      6NptlXmytc9Bvji0Ikf+uICq+pifG+jeGXUOiw18ks361q4bh1YLTZHYP3RbMUwdvW2ysbWH
      NbDujt5s8tlnn2JYA485O3WapsP27sHQWjzVRgtNtqjW6/SrbBnUW2329g/7JzRAtVJmd3ef
      QDDgttxmm1rboFDMD23SXa/VkB2T8kC/vq030NsWMwGDJ4duy10qlQjGMxzurPfLzrkL1K2k
      YZlD67RIvWe9jisBSaLTMYjFY4QG+r6Z3Dyq5JBMuX1ygFQ6QzY3B47b5Ck+jdn5BZIRv3ui
      qn4Wc2kcRSMeCY3bTSaH7gH0cp5APIUsuc1mUJM5zJ/gDww8KcHBtBzmFldwTPcmzbJt/KEo
      yXjY7dbgYFo2ucUVHFMf06YGtaqfpbmZbj95wN+gJnN41PVh8HH8THaeeFijUnUPvBoMsbw4
      T61Sdm8qlQB65YhWxyQ40B2VZWl8EbOetmNaQ1rbtvAHI6QTEbdrJfvQy8cEYymUARshTebg
      sIjf73dj1qubLalD9wCaFiCXTVMonLh162kDkXj3cWsPSZK6i2ENPhkyWjiqRjQ2rNX1NtFo
      lPjAPc/5JoBjYzug+XwYhvukRG+1QJIIBjT3AJktiqUK1XoL03S1O1ubGJKPoOq4T1Uch0L+
      iP39fSzHDUSnrXOws02x5p5kGE02tg9IREOsbe71i3e3tyhX63TaTdcuoOsd6srnAsoAAAKi
      SURBVJUSHcNNrFq9gV9TabVbA311C9OGUuGQ1kC/0zAMpE6Tw2LFTW6nqy0XDml17DHtQdHt
      O2MZVBttLq0scPeB2+rV6g38fpV2u+W2AKpG5XCbp5vbFE/cp1ayZXD3iy84OC4M+GvQsVVy
      s2labbfV1FttGtUyhmUNPGVro5sSi8urNOqu3Y5hEAkG0Nsd90qNQ6tjEgqG6BjuhaBWb+L3
      +2i3265dU2d964BELMzTDfc+zzTaFIonaJrmXoxMnbXNA0JSh8PawFM200LTtKGWqdMxqJZL
      HBydEPK7N8zNepVisUh74Pic+3sATZExTRMt7DoWjkSJJVPcv/8IlnuFisbs7Cw+p4U1kKeR
      SJRoMsX9B4/cboIsk52bIxT2UypV+9pgKEJsJku9PPDoTZbJ5s6qDVAqVb5Eqwxoy8/WSgPa
      kwnakfcAmUxqqLsUDEWIpbM0Ks9pN52lUR30V0VTu8fCFwo/W6toZDKzaLSwHPdYhMMRIskU
      jx48YmFxVNvGxH0CEwiFiaZnh+1K3fiGwwFOTtxyfyBAS+8gK8rQe4B0doGo1KA98D7E79cw
      TQNlYEU4n98PdgMLyX2KNEF7zi2Ag8/vR1V9FAaelCiyzHH+mHZn8NmzQ1tvUNc7tHT3SiKf
      atvtgXUoZVp6k1q5QrXuPtFQFZlGtcreUR6nf9mRabUma/eP8m4r1NeWJ2iPB7TSgLb5/NrG
      l2gH3lucDHZrFJlGrcre0bH71OrUbqVMpdEY0+4fHrtrmzo2mt+P6tMoFI49tfaAttNqUteN
      oXshWZYp5I9pdzpul6mv7dAa0Kpqz+7RgA9ItFtNqpUKlYGYSYqCpqrUalUMy9XanTqN2snQ
      ewDV50NRVEol9+mfA/g1HwGpw2FJf6b2/wPA6ESo934iNgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Late Driver' width='144'>
      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
      4v8DECDQjPLKagkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Late Driver Distribution' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Late Frequency' width='192'>
      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
      dZ2NAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Late Prediction' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAV5klEQVR4nO3daXRc5Z3n8e+tXZu1W6slb5IXWfImy6uw46VtIICJ43QDgUBIDzTTZOkl
      c87MOTOv5k2m58WcPmnoBEgIDTgJYUkAg3djbBnbki3J1r5b+1alkmqvW3deOJabdmiVnSvJ
      9v1/XqkWPc//lvSruz73UTRN0xDCgBRFUUyzXYQQs0kCIAxNAiAMTQIgDE0CMAu0iErNmUO8
      deA3XO4cxuNyElBvoQF/P6+9/ApvHvgd/SPjX9UJpz87RSCK5pxXL1PTNnQLBdw7JACzQA16
      +KyqmYcfeZDMuAjvvfz/+PhsNRM+Pw21F2no6CfocVJXW8OluhZCqkrrlYvU1LcSigChMcJx
      hdy/YSFqTxV11VU0Xx3C5x6ms6uD7qExQKO5sYkwgBamvb6GmsYOwqEAjZcvcrGuFTUSoa+j
      gS8qPqdj4CuCdI+zzHYBRmS2xbGttJC3f/UmKzbvJDYmhjmJibRVnaTNl0DozG8ZK11Ndf0E
      8yw9BDU3h945wdce3I2qgRW42ljJESURh3+Ui/1hxl0aT+5fzsEalaf37/5Sf0ONZznTHCJb
      reKUr5zR2nOcP98CP/weF45VsywzBufsfBSzTtYAsyAS8RObvoR9O1dy/lIzaemJJKVlEAn6
      SUrPIcmu4g8rJKVlkhJnIxRJ5IGvb6L69KcMjIcByMhfyu6Hv0VGdhYl5ffzw//6BDEmG0Vr
      SslMirvWkaYRDoXwez3EpGSSkeSgs6Uaf0wB6wvn4vNNYI5JIyNtDsosfh6zSQIwC0yKlbG+
      Bo5fdvJXj2xj3e776b1wgrzS7Sj91ViLH6AoSaWx6hTulBLKCtIZ7ulh0eqtZM2xgH0u28pL
      SJwTT+n2B0n0tFPd2kdq3nKK5yVf74WSZTl88u5HRPLKyAt30GUu5LEHd5IV5yVlxUYK5hez
      Oi9MsyuWZfNTZ/UzmS3KbJ4Jvt61ohj1++erBcZHGPZZyZk7Z7ZLuWcpiqLMagBU9dqhD7PZ
      PFslCAOTSyGE4UkAhKFJAIShSQCEoUkAhKFJAIShSQCEoUkAhKFJAIShSQCEoUkAhKFJAISh
      SQCEoUkAxF0hMD7Ab954nYYe17UnNJWmC8f52c9eo7HPjW+wmZ/+9Ke89d4x/OEQR999g2OV
      LUCEmlMf8etPzvKnLnuWy6HFnU+LcOy9A+Ru2MrFkxU89K19xCoqPX2DJMTCHz46z8Z8leFF
      D7AyzUzPuUN0JJeg1B8jsaCE9uEQK8yt9GQ/xPbC+Mlm5XJocZfQ8MWlU5idQ3aGA69fA5MF
      R2iI1187QMayYtxj4xw68DKHKmppDzgoW5hJQcki2lucLFucz6JNpfibu29qWQIg7gIKFo+L
      oYlxXK4AdpuCpoYxJ8/nuee/Q19jJZmle/jxi89Dfy2ax0vrqIehrj7mZsbTPTjCaHMr5pz0
      m1qWAIg7n6JQVlbEu6+/TkrBOiyjjTQMeLl8+iAvvfIWecvXoI518spLP8OUtZLynZuo/+Qt
      WsN5bFhfjKm7ivcvBilfcfO4Z132AbRImJbaSlymVFYXLcJiUvC7B7lQdRl7Wj5rluVTe+4z
      hibMlGwoIyMhBpB9ADG7dNsH8I504rblkKq56HV5rjVudrBmYzn2sQFGfB6Iy2LXrq2T//xC
      3Al0uTFWxD9BYsYCsoM+2vzXvtXtNisXzp9mjDkUWEL0tTQz6nSxqnQtiQ4zkUgETdPQNG1y
      TSDEn/IvH1ThDYR0a++JHUVkpV47GqRLABR7LOPDgwyGJojLygLAFwhTUlZOR2UFQxMK63fv
      Ru1vpHt4jJT8dMxms2wCiahUNvXh9kRzl9PofHPrcmw2G6DTTnBsaj728TZ6QrFkJ8bR1dVJ
      0DvKmc+OM2xJISPeQUfNF9QPqSzKTNGjSyF0ocsawGS2sXztpsnHeXn5AGzbnj/53JqN9+nR
      lRC6ksOgwtAkAMLQJADC0CQAwtAkAMLQJADC0CQAwtAkAMLQJADC0CQAwtAkAMLQJADC0CQA
      wtAkAMLQJADC0CQAwtAkAMLQJADC0CQAwtAkAMLQJADC0CQAwtAkAMLQJADC0CQAwtAkAMLQ
      JADC0CQAwtAkAMLQJADC0CQAwtAkAMLQJADC0CQAwtB0CYCmhqivquDspQZCkWvTDvtc/Xx2
      /ChnLzUSVsM0XTrLmcorBNU/e1piIXSjSwA8I5344uaTZfFOzhNstsezbvN9xHhGGB5px2nJ
      JT8+wtXhMT26FEIXukySpwU8zElfSEZwYnKeYJvFfG2eYGUOiwJe5mQsIk1RafaGUFVV5gkW
      0dP03WoIhUMEg0FAr3mCHfGMDfRhDruJz7k2T7DHH6S4rJyuygoGTBmM9XUzZBsjJjkRs9ks
      8wSL6CmKrs1ZLVZ95wmOS80jPnCVIRLJTro2T7Dqd3P2sxOMOOaSn7mQNKWfbr+dvPREPboU
      Qhf6rAFMVpas2jD5+Po8wVu3z5t8bnFxGYv16EwIHclhUGFoEgBhaBIAYWgSAGFoEgBhaBIA
      YWgSAGFoEgBhaBIAYWi6nAkWxuQbauH1A78nceEG9j+4CQvQVVfBR0fOkbxgNUtTPRytqMM3
      4eUvv/csx985wHhYY993/5aa91+ledTH5q9/mw1LMmZtGSQA4radO3eFvU+/QPeZ39Pl1lg4
      RyExq5Bn/2Y1pw4eZn7ZQ/zdhl188vFBMhU3+ZsfYHfpUrTAGNW5Rfz9M1tnexFkE0jcvoDN
      QYrDRmpqPG5PGID4OAenjx5i3potJFrA3fkFttwyrI44us5+yD/95CdcGY4Q7Knh//7TTzhS
      3cVsDpGSAIjblmMNcPJiDRfqRslOVBn3Bjj18XvE5i3HpvlQ1TCna5zctyqDYERj3eb72bE2
      m87eMRYXbeL+HWtw9jlndRkkAOK2FZXvJn68jxXb7icFL84JH1l5+fQ1XaahuY1gJMzKtRux
      AvGJ6aiefkZiStizdh7xtiCdIw72fK0Ifa/2vzWKpuk83OYWyIAYEY0n//d7uD0B3dr7P3+z
      i8J5qSiKosgaQBiaHAUSt+W///wode1DurX3/W+uZ/uaBbq1Fy0JgLg9GrN69EYvsgkkDE0C
      IAxNAiAMTQIgDE0CIAxNAiAMTQIgDE0CIAxNAiAMTQIgDE0CIAxNAiAMTQIgDE0CIAxNAiAM
      TQIgDE2XATERNUBd1XnGlGTWrV6GzWwi6HVyqaqagDWVsjVLqK44zljAQcmGMjISYvToVog/
      my5rAO9IF+GkQvJiQ/SNeQGIqFC4ZhNZlgDOgAd70nx27doq//zijqLTPMFe4lMXkR4cm5wn
      2BGfiKuzmWBSFik2jcudLRwa7Gdl2XrS4qwyT/BdLqLzzUTC4fDk3L03udPnCTbFJODq60EJ
      u0jIy0bTNNyDnYybU1ian4bmdbLivu2Yh5rpc46TMSdd5gm+y5l0nrvXYrFMzt17kzt9nuDY
      1HySI/2M2dLJTorj6tUuIuEQHQ2XOHrkJC5iGG6qpHnMzNLcND26FEIX+swTrJhZVLxu8vH1
      eYJ35RROPpe6boseXQmhKzkMKgxNAiAMTQIgDE0CIAxNAiAMTQIgDE0CIAxNAiAMTQIgDE0C
      IAxNAiAMTQIgDE0CIAxNAiAMTQIgDE0CIAxNAiAMTQIgDE0CIAztlgJw4cIFDh48OF21CDHj
      ohoUr6oqXq+XUCiEP+Cf7pqEmDFRrQEGBwd55dVXprsWIWbclAF46aWXZqIOIWbFlJtAWdlZ
      xMbGsnLlSjIzM4mNjZ2JuoSYEVMGYO8jewHY/rXt016MEDMtqn2Aazexne5ShC40ld6OZjr7
      RyefioQDtDfV09E7jKZFGLjaSnvvMJqmgabS19uNP6QyPtJHfWMr/lBkFhdgZkUVAJ+7mw9/
      93vO1zQSCBvnw7kbDbXXcuxMJYff+S39f7zZcm9rLXXNXZz56APq2hs5dOIsx99/l6seFfdA
      Kz/9+at0Dw3yyR+O0Nlcw4lzdbO7EDMoqgDEzMll88alVB99j39+6RWudLunuy5xmwZdLjZu
      e4gndszjYkcAgJzCtezaXERCxnxUzzCrtzzEt/9iIdUdbi5eamLDplLMgM/tZHB0hPrLLYRn
      dzFmTFTnAcaHm3n/oy8of/QpMpOho8MFuXOmuzZxGxQgGAzh8QSIy7QC4B3s5LP6Hnbu2UZf
      cwVjgSDeQAB//1k+/vBzrMoova4Unvzed/E4e/n4XBdGuWF9VAEI+XxkF6yiMCvEgQ96eOxb
      m6a7LnGbFs5fwK/efAW3ksMLf+2jprEXd/MZqmoGaLpSy95HH+Hi+7/kSDiD5194gv27H+BS
      5SlSc0u4cOQdvmh2sn3vk+h7R/47V1QBSEjJwnn8Q97uCJO34eHprkn8GRwp+fyXF/9h8nHJ
      kgJYUsCWr994z3df+Icv/c6qteUAzHv4O5TPSJV3jqj2AUwWBxlpieBIxK6FprsmIWZMVGsA
      99BVPKZMdu4owB4r2/53quqWfjr6Xbq1tzg3laL56bq1dyeKKgA2u5n6ys/o765j4apt7FhX
      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
      g04AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Late Prediction State' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAW0UlEQVR4nO3dfYwk+V3f8Xc99PPDTHfP7Dzuzj7e7e0dhy/Omcs5dnwKchysGOKEPCBC
      FBGJkBAS8QciiZBOQpFQFCAGBSV/AEEECZE4DgiDA0GHfQcXfGf79vZp9nZndp5nenp6+rm6
      q7qqfvljZnt2p2uWvvNu783W9/XX1G+rt35dXZ+uh65v/TSllEKIkNIfdweEeJwkACLUJACi
      T7m4zq07qzzo2Fgpn5WVNcrFNXzXZn7+Jq5//I6mNTkHEIe9+dpXGR2LsduIU5jM4da2yYxP
      UlxeZebMWTZWV8gnXb42X8fsbPKJ559m2U5h1Ddg7AyjNInpHm/ebvHJ75yma6S5cHr2cb+t
      QLIHEH2U8nE9j/LKArFMnM2yzfV336RpKd74o9/HRbFdrnHh2Y8wd/oMhVNPoZVvY+lpRtMR
      rl2/wuLqNhMTY/zZ619jfbP4uN/SkWQPIPpUd4rUOoqJXBojkaa8uUI0afLut1Z46RMfpbi+
      zvTUJLZvgNchamisbpaZm51gu1zDc21Gc3nqlRrJpEnbM5k+UXjcbyvQtx0ApRRKKXRddibi
      +HkoW63sRMRxJV/bItQkACLUJAAi1CQAItQkACLUJAAi1AYOQL2yw8LSCgBLCzd558p1PLn6
      KY45c9AZs7kxGu11ADQzzokRhev5mJri9nqZL3zxrd68s2NZfvIf/pWH31shHrKBA1ApbVLa
      qZBKZ8kkolTaHlFTB6VwPcV6qdGbN2oamObA/7UQj83AW2lufIrc+NTeRDZDfr9djoLEcSYn
      wSLUJAAi1CQAItQkACLUJAAi1CQAItQkACLUJAAi1CQAItQkACLUJAAi1CQAItQkACLUBg7A
      6p1bfOudyzi+4tb8Vd69ekMKYsSxN/Dt0L4eZWY8guNCLpejtLCK6/uYKHzfv29epRSu6z70
      zgrxsA0cgHw2RbFqkexa6JrGzNxpYoYe+FhETdOkIEYcCwNvpZncGJnc/kQq1SuIEeI4k5Ng
      EWoSABFqEgARahIAEWoSABFqEgARahIAEWoSABFqEgARahIAEWoSABFqEgARahIAEWoDB6C0
      scqVa/N4CtaWF7h24z0piBHH3sC3Q7ddxXQhieUoHNvBsV2U8vGVFMSI42vgACQiGpu7bU6l
      LaLRCBFXA3R0XQpixPE18FY6PnWS3gAx6fPM7rcrOQwSx5icBItQkwCIUJMAiFCTAIhQkwCI
      UJMAiFCTAIhQkwCIUJMAiFCTAIhQkwCIUJMAiFCTAIhQGzgAjUqJ9xaWUcDW2tJecYz/F75M
      iA+1gW+H3q1b5BKKlqOYnJ2j462g4eP7UhAjjq+BA2CoLusli9MZi2azSSY/ga7LCDHieBt4
      K509fVAEAynSj6Q7QgyXnASLUJMAiFCTAIhQkwCIUJMAiFCTAIhQkwCIUJMAiFCTAIhQC/gl
      WN33uENN04bXGyGGLCAANteuLO3/7fLc888Nsz9CDFVAADQ2V25juT5Tc+eH3yMhhijgHMDD
      armcmBinkM8Nv0dCDFFAAAyefeEFzsxOYDtOr7VWLnLz9hJq/++FpTXkyejiuAs8BHr79a9Q
      Krv8g5/40V5rtWlTSGm0HMXa2jrRdH6vEEZGiBHHWEAAovydH/whlhcXWLo6z/hHLu3P2GVt
      2+J02mJkdIRSpY6nNCK6JgUx4tgK2Epd3nn7beodB9uL9Fpn5s4xM7f392jmHLP7fysZIkYc
      YwEBMHnx458Yfk+EeAwCAuDz9Te+hoNBenSSjzx3Yfi9EmJIAq4C2awuFbnyzmWMWGz4PRJi
      iAL2AAYfffnl/b+9oXZGiGELPAS68o2vU7cdpk6d4/TZ00PvlBDDEngSPD0zyXgkwTMXLw6/
      R0IMUcA5gE48EaVdLzO/sDL8HgkxRIH3ArVaNpFYgvxoZvg9EmKIAg+BMtk4KjaC59jD75EQ
      QxSwB+iwtFTmm3/6J0RTI8PvkRBDFBCAGMqtksnn2dwqDb9HQgxR4A9hXTfGqVNnaFYkAOLJ
      FnAOEOeVT38K1/d56mJy+D0SYogC9gAOGxsVstks8Xi011rd2eLGe4v4CrY3Vri9uIIMECOO
      u8Bfgt+7eplKbYvx6TnOz00DULccxjMGLUfRbLZQZgrl+ygpiBHHWEAAIkxO5djZ2aatEr0A
      mLislyzmMhbpdJqNnRoKHUOXEWLE8RW4lbatJp4R4+nzc7226VNnmT61P5FOcWL6JABSDyOO
      s4BzAJ+R/CTjuTy13d3h90iIIQosiVxdXsVyXPKWw6WL54bfKyGGJCAAMc4+dZ6p2SmK27IH
      EE+2wHOA4voy1fouenJs2P0RYqgCAqAzOX0C10wTMaUkUjzZAm+GW7hd5O3XX8NMymjA4skW
      WBN8/qmzzJ07DXZr6B0SYpgCrwJdv3yZut1lcvY0F86fGX6vhBiSgAAkuPQdF/ATY1w8d6r/
      n4V4ggQEoMPiYpGOt8J4YZQThdHh90qIIQn8HeAvvfg8tuv13eMjxJMm8DLo1OzJ4fdEiMdA
      vuJFqA0cALtVZ2V9a29UGKXY3t5+dL0SYkgGvml/c7tM1PCxugp7d4O17Trj4+P4vh9QEIMU
      xIhjYeAAaMqj1rRJd23KlQrV3QqerzB0HV07XBADhmE89M4K8bANHICTc3N0HI9IxODCxec4
      c97FNPS9EWICxtKWAbbFcTBwAHQjQjJxMGSSlDyKJ4FcBRKhJgEQoSYBEKH2SA/kb62VsbsH
      wyydm86RiEUe8AohhuuRBuAX/sf/Y73U6E3//L/4NOdm8o9ykUK8L3IIJEJNAiBCTQIgQk0C
      IEJNAiBCbej3M+zULIq7zd50PptgqiCjUYrHY+gBeP3yMv/tK5d709/z0nl+6G98J//xt948
      6JSh829+8K8Ou2sihAYOQLtZpVhpM3dyimppk1oH5manHkonXM/n7ZsbvemIKUdmYjgGDkCx
      VCFmKCxHYZgm1co2szMTaA8aIebQ2AGe5/XN6/sKz/M4TApqxDC8j4IYl3LNJlno0HW6+K7z
      F48Qc6gkwDCMvnl1XQssnpHbrcUwDF4Qc/osXdfHNHT8SIFLo2OYOn3f8g9TtdnB7h7sCUZS
      ceJRCYZ4eAYviNENYtG9b2rDMLh7S9ujHCHpl7/0Fn9+Y703/RN/7yX+2kdOP8IlirCRs00R
      ahIAEWoSABFqEgARasfukkqr7bBZPriVIhE3mRnLPsYeiePs2AXg2lKJf/8br/emnz83wc/8
      8Cv8s5/7PeqW3Wv/wr/8DOOjqcfRRXGMHLsAHKXV6dJqd3vTSsGXXp/n/3z9dq/tsy9d4LMv
      P4XtHPy2oGma/LYQYk/0J99o2fcdLtUth61ykx/9+S/32vLZBL/2U9/7OLonPgSe6AC8H7/+
      lcusbNd60z/w15+TAv4QkADsm1/Z4fpSqTf92Zcu8MaVFX7ly9/qtb14cZp//n0v8tXLy3vH
      WPs+/h2nMA25oHYcSQAewHY8duvt3nTTcgD4hd9+897tn489M4Oha/e13X028L1taKDLQ4M/
      VCQAD8kv/++3+MO3FnvTP/zZF3j6ZIGf/C//t9c2NzHCL/6rv/k4uieOMPB+23MdGi0LANfp
      UG+2HumNcEIMw8B7gLWVFdq2w+kLz9BuNNjYLPH0pWcwtEO7+X1Kqb5bRRX9d48q9YDXD0Kp
      wHmVUgEBVQS2Bi4rqLfB8x75HgK7q/jt165TaRwcWn3+kxflN4vHZOAA+JpBJhnDV+C5LtOn
      5jA08H2/b6NQir7KLzhqXoXv91eE+b7ft7H6fkD1GQ9aVn+lWt+8Krhfvq/wA/satCyvLwHK
      V6gj+vX65WVWS/Ve2ysvzIFSbFVavbZ8Ji4PCxiCgQMwPTFGqdZGORae26W8XSSbPouu6+j6
      /Sd2vSGSDleE6XrfSeBRFWGGYaDRP29Q9dlRr+8fuknH0A/Nu9/XwyPa6IFDPz2gr4fXQUBf
      7857eL3ous6fXV/n137/nV7bZz52jh/53F9mfecgKBoasyfkto+HaeAAxJIZZpN730ipVIqJ
      /fZBj1TE+9e2u/zYf/qD3rRpaHzxZ/4+rU4X1z3YayZiEaIRGZPtg5CrQMfQL33xz3nz2lpv
      +l9//0tM5FL819/9Rq/twmyeH/v8x/jpX3mNeuvgHqmf/sefxOl6FCsHv5BP5NJMFdJ95yxh
      uGQrAXhCWHaXpa1qbzqdiAKwUqxRbXZ67a7n88ffvMP//JPrvbbv/9QlvvujZ/mRn/u9Xtto
      Os6v/9vv41e//C3u3PP//qNPP49ld/niV2/02j738lO8+MzMI3lfj5oEQDzQwkaFq3cOBkWv
      WzYNy+bdhWKv7ePPnWS30ebt+YNnO42kYnzXpdmh9vWDkACIh2Kj1OA/f+mt3vT5mTzfdWkW
      23HvO7SKmkbfRZPHSQIgHqkf/8WvsHXPs2C/8OOfIR2Psl2955JvNsFkPv04uicBEMP32jtL
      /Pc/fLc3/bdefoq/+6lL/NP/8Lu9tkQswm/8u7/Nb/3xVW6v7/baP//JZzg9NUq5ZvXa4lHz
      A/+QKAEQHwpKKbruwQ+HprF3mfe9tTLfuLnZa3/lhdPUWh1+9jf/tNf2woVJXv0nn/pAy5UA
      iCfGuwtFvHt+fX/2zAkiAbep3/ujpwRAPDF+9jffoNU5KIv91Z/6HL/zxk1+542bvbYf+O7n
      eOWFM/zS//o6IAEQIdRx3N5lXCljEqEmARChNnhBTNemWmvs/+3Q7jiPrFNCDMvAAVhdXaW0
      tU7HVbRaLUql7b2iE6UC7wj1fb+/ICagSGWvmKT/Pwi6714RMO8R9+jvLatvaUcvK+De/8Nv
      4Kjag6PWwcDv66jiocN94m6dRN9/ELCso9dL0HsNKhTae33AvH19fcB6DXh90Mrq/1yPWlfB
      dyAPvF4V973XgQOg0EnEIvgKMiOj3L26pIJW/hEbdeC89Bee9OYN6H3QRnH0svpefmRf+4MZ
      3NfgDzogLA+oVAvua0Cwj1qvQRvwoOvFD/pa2GsP7ldA/wdY/lHrKrCvD1pXQV+ig65X/4gv
      wXve68ABmJ0+gRYfQTkW5eI6DcvGVwQWxHBEQYweUBCjaRrGEYUjhwtiNG3wgpijltVXpPKA
      ghjtcEEMRxXE6H2vD1zW/vsK6mtfQU3AetGO6Kum6/3r5Yi+6gF91R/Q18D1oh9+ff/y6S0/
      6PX9n+FRn0v/NqQF3ks06Hs9vKyBL4NG4mlmJvfu10ilUoxN7rUPXLsrxIeQXAUSoSYBEKEm
      ARChJgEQoSYBEKEmARChJgEQoSYBEKEmARChJgEQoTZwADrNGstrmyigVSuzulmS8QHEsTdw
      ALZKu0T8NlZXsb1bR3XqdPvvQBXiWBk4AJpyqdQtXMdGuQ51y8H48DzgS4gPZOC7QU/OncFx
      fUxTJ33mLK7PkaPDCHFcaOrbuJ/57sgqHbtL+Z7RFCOmwdhIglLVwvUOjpPGRpI4rk+9dfC0
      4lQiSjoRobh78Kg8TdOYzKeoNG069sFjLnKZOJqm3TdyYyxqks/EKVZa+4Upe07kUli2S9M6
      eDR4JhkjHjUoVQ+eKmboOidyScr1Dk73YAT5fDaBrxTVxkFfE7EIo+nYfYNvA0zm09QtB+ue
      MtGRdBzT0CjXAtZLrX3f8/3HRpJ0PZ9a8/71kklE2LpnvaBpTAWsl9FMHP3QeolGTArZOMWK
      dV+11Ilckrbt0Ti0XhJRg+171ouu60wMuF5G0nFMXbt/G4gYjGUTbFctvHu3gdEkTte775Ht
      6USUVDxCsRKwDTQ6dJyD5ecyCYD7hpi6uw1sVVr3FbvsbQPd3uieANlUjFjkYBv4tgIABxU6
      hwsafN8PbNM0ra9I4ah5D7fd7eoHff0wlxWm9fJ+3+vj/FwOtxuvvvrqq31zvA93P7hyuUxp
      c5W1rTKFsQKebVFrtVldXcP3PVKp1N639/YGC3dWiBkuV2+tYEbieFYd22mzVbPotlu9eW9c
      v4bhKqpdm7TuUWy4tOtVmjub2JrB5sYmmnLpYrL43m085dFsNuhYFtFkGkNT3Lh+k2wqytV3
      L2Nmxoljc+X6DVxlsrF8i45vMpJJodw287fXSOCjkklMTcOql7m1uEQ8lWV18Rap3BgRQ+f6
      tWt4StFuVFkrlink89TKWyyubJJJRrizXqKQG9l7v+Uy8USM+Zu3GCsU0HW4fm0eTfeplveu
      puUKY1itOla9wfbODkr5dDydpAlXr16haftY1SIqkiYRM3nvxnWihsvqjsVIHMpNl8bOCraW
      Ymn+GqOTkxgAfpf5GzdotLsor0u3XcePZmiUN1hYXIJoBLvRotX1ScV05m/M08WkuLqIrSJk
      00mWb99EM0waHRe71SCRTILymL95m2xE48rtO4zmCkRNgzu3brBRqqHrimQiiea2ubawSlRZ
      FCs2la0VEqPjRHSN8m6ZVm2XlgOpRAxNuVybXyAdUSxt7YCnSKX2vu3Lu2U6VptEMommaeyU
      SnQ7dSrNLu16DUcpkprNtaUSWrtCubzL4toG6ewo1d0ymmvjKI2FhSXGxwp43Q5vv/1NfOU9
      vN8BOp0OZjzN2UKUnTZEohG2VxZoewZW+2B31Wh3efapOXa2i7QdH6frEIvr3FouQbOI7Ud7
      85qay/LKBtXdEjduXKdudXE7Fi0NNu7coTA2zq3FNbIJA821Wd4okYrC5m6biK7RKq3TsF26
      eozc2BSFTBTluUyeOovTbtDpHOzGS1tFbLtFq9Xm7sFJqdJkojBKu1mh2WhRKtcAUE6L1a1d
      WrbL0+fPoGtQa3a4dPEC5e0SrUaDu3viTqeD3dylUa1Td/aKxKO6x+LKFm2r07uU3O00uXF7
      ldnZKW7dWmQkFQV82rZD17FpNFqUtvee0x+N6KwsL2Mol5sr2yQTMTw9RrN0h3rD4e4BR7ta
      pXDyDJrvsLm2xPx7t3B9qFsOzz57lp2NTS5fvU1+JA2ahq6B7zYwk5NMjef2PoN4gq3VJdq2
      Q6e9t76seplmrU6ladO2nd5hbqfdxu7YtO+uV9/FarYoNy08q07T6rC9Xe6tl0qtTqW8fzld
      +ditJhvVFprXue+z6XTun04aXe4U2zR3VnE1A9vpgufQtDpUWi26jTr2/krwOm22qg26zQqt
      ZoNmV2FGE4yNn2B29tS3vwe4y3EcOs0qW3WPuekxdN1ke2eX2RMpPD2DoXXpOh66b7O4WmRy
      Ypz06BixqEE2naFWq2IaOoXxPN2ug9tVmLEYdrPO6OQUZ2Ym6SqT8axOuWmiKYeZmRkSsQjJ
      VALNjNOsVzh99iQGcZLJKOVKlUREY2e7RL3VJjuSJ6L7LCwukh4p4DsWsWSWbDpJpVLB0DQ8
      5bO5U+VEfhRTdVkrllGuTzSdBuUzOpLBiERp1KoURpKsFXfJ53LQtVhc3ULXIaIrIqlRYhGd
      5cX3aHYU2XwGr6vIphP4WoROq0YmncZ2fQqFAkr5FLIpOr5JLpsilUqBUsRSWWYKaXabDpoO
      hdworq/h2y3ys+eplbaYmZ7A6Xax2x3yhQKaaeB1uyRSSVYWFtBjKcbHxjhRGCWSyKC7LRaX
      NhibnmSqkKPleKRiJrvVKlokjdPYxiFCJpXAcVwSpk+j7dLpuowVclTKu0STMbptn8mZcWLR
      KFHTQNMNErEIZjRGOpUC5WFEdBzXQOvaGIkkGorcaBan08SyuihNYyyfQ0NhRk0syyObihGN
      JkgmE71tq7pTxDcTpBJxzGicWqWCaWiMj0+gUCQiBkrXgCiJiE7b9cjn8+RHYmzttInqPpF4
      FKUM0sk4nY5N3FT8f1m33o4sW5hgAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Late/Held' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Most Frequent Customers' width='192'>
      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
      DFrPi2IAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Percent Held' width='144'>
      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
    </thumbnail>
    <thumbnail height='192' name='Purdue Logistics' width='192'>
      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
      nwXWeSr5/wHMWcbXSklppQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Total Held Hours' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Total Held Time Cost' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2dyXMjWX7fP5lIAIk1sZMEd7L2paurqzXdPd2aHlktz4ykGFuyFbYUitDF
      F0fYEb7aEb74P7BvPjjCEb44ZOsgeZNGmkXSdE93V1d3105WFXcCIEBi35GbD2RVF4usKiZq
      IZt4nwsCQP4yfwm8b77t935Psm3bRiAYUOTDdkAgOEyEAAQDjRDAt4BOo8KD5fXDduNYIok+
      wNHnp3/1V7z93e/SbbUBk9zaGrLV5H4jzJmEhBZLsLySwe1xMz42QjZfIRZS8IaSpFOxw3b/
      SKMctgOCAyDZ9HSd+/PzWLZOdXOT4bE0yXiItfnPuS2rxEMqppXiL//6F4RCcXJBFz/8zVOH
      7fmRR9QA3wK6rTr5chOvZOD2h6iXtkikR6kUy3jcMoFgENMwkGQ32Ab5rQrJZIxQMIh02M4f
      cQ5VAJZlIcuiGyI4PA619InKR3DYiMevYKARAhAMNEIAgoFGCEAw0AgBCAYaRwIwDONV+SEQ
      HAoHngkuZNdYK1SYSsdZ36xz8dQkdx+sEQm4aBkKJ2YmWFu8h6EEkLo1ZF8EvVlG1VKMpiLc
      uztHODVMKbdOcvwEqWjwVd6XQHAgDiwA2SVjmSZBLUqoZbK+ngUsTLz4XDaWbYOi4rINJG8A
      u13Gow1hdhuYbYXg8Di93F1C41do17KYYR+WZT11LqBeyrOc3ULx+Dh7auZl3a9AsIsDC8C2
      bPReh6XFJSzJQyTopl2s4HNLdC0FtVjE6DQwlCBSt4rs09CLWVQtSdeyqWRW0BITFJdvkRqb
      xuVyATx6fZKFuTl8QxMs3J7n1LlTeF/O/QoEu3AUCtHtdvF69y+KnU4HVVUdXdw0zacKoNus
      cn9plYCWYHp8xNF5BYKD4qgT/LTCDzgu/M/j66tXCUWTzH35Fd2XemaB4BsONRjuWTWA3m6w
      vJ7D0G1Onjsl4rYFr4QjW67KxQLNdhfDtMVkheCVcWTLViGbw7QsCutZxOyD4FVxZAUQisaQ
      6dDtyuzfSBIIXpwjK4DhdBrbMghH4kIAglfGkRVAudJgJJ7CHbAxD9sZwbHl6HaC8xmu35jD
      lxzFBFELCF4JR3YY9OH39VKeFn7Sychr9EwwKBzZJtBmbp3FxUU+/8WXBBPaYbsjOKYcuAnU
      qBRZzGwyM5YkV2oypKlsNXRifoWmqTA6FKeYz2C4Aki9GrIvit4o4tVSxEI+1leWCCfTlDfW
      SIxOEVDdz7xer9tjaHQMV1NHkURyD8Gr4cACKJdLgITi9YNZweNLYJdylEwZ2bax7Bj1Vg/L
      7iJJEnZ9Fckfp72VR3PHsLwhtpZvIMVPU9jIMTE++sxo0FAkQr1cYnOrSNwwxFyA4JVwYAH4
      A0EWl+dYpIetBFlemEf2xbG7dXqmQrvdptOqY7r8SHod2eNHLxfwBjQ6PZ3yZo6gL0w5t0o8
      mXpuNGg+s44/MYIiy7gU5ej21gXfag7cCbZMg1q9STDoxzRtZFnCsmwURcZGolatomlhQAbb
      BNmFbZnIsgLYWKaJrCiYhoGiKEiS9MxO8J0vr9KSVQJdg/F3LiOWzwheBQ4WxChEItudUWUf
      q1js8SSsO33rR1nfpEcZ4GT3s9v+D/H6g4yNpvnV33zCxEGdFAgcciRbFrZtsLK8wvraMply
      mUa1QUATdYDg5XMk5wFs22Z9cZ6NhonmdTFz+rQYCRK8Eo6EAPKlBreWCge20wIqb59Jv0LP
      BIPCkWgC3Vsv8Z/+7PMDH396PC4EIHgpHNmZYIHgdSAEIBhohAAEA40QgGCgEQIQDDQHFoCp
      98gXNjGNHvVGC0Pv0mp30Xsd2t0eAL1Om05Pp9tu0dMNOq0murG9nqvVbGCYFs1GA9MSWyMJ
      jgYHHgZdXnxAy3ThVWBpLY/md9Pq2XjcNobp4syZkywvLWLKXiSzjSQrmBa4vT5mxxMsra6j
      ukwaPYWwFmZqbBh4uE+Yc0E8b/rC6NS5Pb+ErHg4d+4MLjGPJtiHAwtgZHSUr768TiceYXxi
      gnpli6Bso8sSPtd2YXR7fbhskNwBbL2NOxjFNjrYpkkgHMWsrBGKzmDrDSzLehQObTmsEWzb
      xjSfvVJ45fYNGkqUzsoC8fQ4Q+GXm7lOcDw4sAAMvYeWHEG2ehTydcbTMeodm7jbomW6yWWz
      RMJ+zIfp0f3D6PUianyUjqXjsTpos5co59dJjE7sCod2ulWqJEko+0XkPcb0pbfpzd/HdfoC
      I9EAsgilEOzDgQUQjia5EE0CkNrJVRsK77wC8Pia3dDOi3/nvZdAYDuYLTA53bezTli+fpVu
      ZJrWyl3CiSFGIr7Xcl3Bt4tjOwo0/eY7hKwmsZExNP/BQrAFg8eRiAV6FbTrJSqNDojd6AXP
      4NiWjHIuR9u0qG7labT1w3ZHcEQ5tgJACnJ6TKOn+PG6j+9tCl6MY1sybLvHF7+aY3Q0Sle3
      DtsdwRHl2PYBtITG0IlZxqNhECOggqdwbGuAci5HNK7xyd9+TKXVO2x3BEeUY1sDTF56G9uG
      0d/5TdZLDR7NTQgEj3FsBbB+5waLNZ3RoB/viEisItgfR02gTqfzqvx46fi1EKdOn2Uzn0NR
      RHJ1wf4cuAZYX14gX2kxO5Gi0rShV6Xatgmp0DYUzp0+wcL8rW+S46ph9FYdNZxgeizOrVt3
      CcdilApbpMamGB2KPf+iL0B1s0qeBm988CE+77Gt6AQvyIFLhqZpZPIlApE4zXaRrmliGhay
      J4zmtrGw8fjDuG0byRvF7jbwJtLYvSZmp01sbBojd5f49BWMehbT1B6LBnW2B4xt2xjGs9Pl
      tuo9Tr97maW7d5g4eRqfW9QCgr0cWACdTgckmcpmnny+RDIZxGdbeGSLtqmwmc8jWzqGEoBu
      FTmYQG9soWopurZMq7CGlj5NMXuX1PiJJ6JBnRXOg0SDTl6YJb+eobVVpDyqE4o/fZNvweBy
      YAEkR8aIpUZwuVwkh0b3fG8YBooyvPPu4Wvq0fcnz57f/iQW7dtZJ1h6E1mNMDQyhNd1bEd7
      BS+Io8bxs7Yzet4T+fVisTT3gCoy9x9k+OCjBEMR//PNBAPHMX00SkycnMVQQvzgN95hOCH2
      FxPsz1F6bPdNo9Xj87nM3i/UOPfKQHn3d4pL5nuXJl+Pc4IjzbEQwGa1yX/8n58d+PiA6hYC
      EADHtgkkEBwMIQDBQCMEIBhohAAEA40QgGCgcSQAyxJLCwXHiwMPgxbzWZZzRWYnhmgbCqrU
      pdgyCSkmDUNhZnKU7MoCxqPMcNHtzHCRFMMJjYX5ecKpNKXsKsmJE8TDYmZWcPgcWACmaSAB
      4WiMZrZIdiuLOxCjLcl40LFsG1NSQO+C4sWsbyIHU/RadcyWjC8xSjt7F3/6LRrlHJHA2EuL
      BjVN5zXT86JJBYPBgQUgSTKtRpVCfoPV1Tyj6SjlSgMsBd1yE6xU6LZqGK7gdg3gC6NvZVDD
      CTqmSTGzhhYdYWvpFqnRqZcaDerqI9jtaMUuCQ4LR9GgoWgCVVUZHh4DYOKxydRms8nJMxef
      av/GpTgAkxNiBlZwdHD06FTVp6cYDwQCL+yMQPC6EcOggoFGCEAw0AgBCAYaIQDBQCMEIBho
      hAAEA40QgGCg2UcABqVi9fV7IhAcAvvMBPf42f/7CUOTwwyNzXBqem8OIIHguLCPADy8+c7b
      yGYdt/+biM12o8Li+hanptM0ujaRkJ9isYSqQNNUGIprVIv5ndygdWRfBL1RxKslCfs8bGTW
      CCdHKOczxEfGUUWqQsERYB8BWCzcvYE7OoK/fI/xoXcAyG8UkJDoGTrNWge7U2F1o0Yk6EWy
      baxYmGK1gW03kCSwyyUkNUItlyGQTtDBQ/PBddCmyGayTE2MPlpfYDtcZ2Cze6f4ftYpPG+n
      ecFgsG8NcOrUFMuFGhMnvglui8RirN+8zUg6SaVSoSF3qZWr+D1JQEbXdcxeF1P2IJldJFnG
      bDdR3B4M06DdrOFRVFr1CsFAAEmSkCQJWZaRZGd7GElIu7Y+lSXnfXmxdaoAntIHWMlU+bXv
      vMGXX8+RTr4LgN/vZ+b0GVSXi6GhBPFEjNmTBrZpoNsy1UqFiclJLNkNRg/JrWL1WijeANgm
      42kXXn+ITrOOPxh+JABJkuhnE69tu4dvnN/4LnvBwLJvDRAOynz55dcMT57+5lPVT3p4u0/g
      2wn8lN1ucLvxAAHfN4lw8Xp2jMI7H7jweLY/c4e1l3wLAkH/7NMO6NHqKbz//nvkM6uv3yOB
      4DWyjwA8TI/H+dWnX3D+0qXX75FA8BrZpwlk4A3EOXM6jtVuQPDpi2AEgm87+3aCf/nTn9Lo
      GiTTY/zgt3799XslELwm9hGAm2QqRtCyGZkU63cFx5t9+gAuovEIHrfbcboSgeDbxj4CsMmt
      rbK6nkV2uV+/RwLBa2TfUAhfQGPEF0ZCpEIUHG/2qQF0Cvkqfr8fj3u3PgYtN6hp6Oi6yCB3
      nNmnBlB44+23mZgaQXosXqaUz7L0KDeoG8VsslXvEQ24aBkK05OjZFcWH8sNuh0NqmpDDCfC
      LMzPow2NUsqskJw4SSzse4236Zz6xgpfLhaIert44uc4M/Vqd7YXHA77hkIEvDqffvY5b1x+
      m7B/O4RBNw0kpEe5QSPJBM3eJl3Twv0oN6gL9A4onsdyg9YwWxK+RJpW5i6+9FvUyzm0I54b
      1B0IYbbvs9mCC7NqX7lE15YXaPdMRiemCaiiP3UU2UcAXW7eWeHy2+f58uo1vv/he8B2xGWz
      XqGQ32BlJU+lnMXl0VCkLh3TTbBapdusYShBpG71OblBJ498btBmtQi+KCNqi43NpuN9hi2j
      zp07y1w8P8rXtxb58N3zjn0UvHr2KQUuYprK/PwDgto3++vulxv0cRqNBifPHp/coMHUGNH8
      bVqmh6lUyLG95AoQDUvcnl/j8nvf68MDm8V7c7R7OlpynLGhaB/nEDyPfR6dEmCj6zqF/Nau
      b56VGzQYDL5k1w4XvWtw+tx5vG4XssP1CgC22WKz2GVyNM79+/0EFRrM3b6HoijcuX23D3vB
      Qdi3HTB96hy2bff1xx8XKpkVbq/nCPg83HuwybuX99Z6z0J2BfidH/8A3TQYafczkqQwMZWm
      Xm8wPTPdh73gIOzbB7j6yWd0DJNwJML3v//d1+/VESA2McXJQIxUIoLL43zEyrZ1PvvkV4TC
      AbzRMaLR8PONdmGSyxQYnhgjk8lwcmrEsQ+C57NvLFC3WSRfaxEdnXj9Hh0RCg/us9Q02drK
      MzV7xvGwrW1bGLqBYRooRj/zJwof/c6PMAyLZqPRh73gIOw7D/Abv/1Drl2d4+2LJ1+/R0eE
      2MQUETWI322wtdUDhwKQJIVQOICieAiF+tkPzeTjn/8tsaEk9Y7EO1cizzcROGafTrDF2tIK
      akBhY7P8+j06KhgNPvv8GrduXmVuLu/Y3La7FPIVLLNLIV/qwwEJf0Cl19MJhPrZfETn73/2
      c25ev8ate2Jl39PYdxj07BuXX78nRwx/PM377wzjUXTu3M1i42ztvSR5iGsSi6tlLr97qg8P
      LGxbZmthhZF3+0lOJoFt0en0CAREBoynIX6Zp9CqVVjLFpBdfs6cmXJsb9s6tXqH2ZMnaWxV
      +vBAYXxihFajR3Io0Ye9Sa9nEQiotFudPuwHAyGAp1BaWaPRavLlV19Ra+mOM6/ILj//4Ld/
      zBvnZ/AoBs5XVpg8uLfEzJUzrNyad2wNbsKaSqerEwyL/duehtgr9CkkpidYv3kHHS8+v9ex
      vWW1+eTvvqCYyXHlRz/EeSJICY9HwTBMFE8/nWiZU2fO0mh3Uf1CAE/jwDVAp1Hl9twD9G6L
      Sq1Ju14hVyjRqBQp7GSTrhYLFKsNSoUclUabzY116q0u2DYbmVVaXYPM6gpd/eivNGsXC+S3
      ioQDMjduZh3bS5LK9NQIFm7iMadzAAAyV957n0tvvkXEC13HQ6ltfvl3X+CWely/9aCP69tc
      v/YZt2/d5ObcQh/27AQ6bgc8HlUOXANsbOSRkOkZOo1ah3KvCZZNQ5Zw2TaJWJhitY5t1/fk
      BvWPJmjbbpoPvgZtisy3IDeoGolz4dJlSpllxk9FHecSta0OD+Zu05ZsFu6tcXY27dBDg1/8
      5BeMzJykuVVhYtp26IOHc+cnWVjIcOny233kQrWolqqE4gqNut5XLtWvPv0YdyhCqdzk1z/4
      Tj8J/F45BxZA9FFu0ASVShWfCj3dxuWy6Vk7uUH1LpbkgYe5QTtNFMWDYZh0mg08ipd2o0rA
      79udG9RhmsLXkRt0Y22Rn3x8nQtnJ7l5d4XhD846+gNtFBSPlzffPo0iS33kIlUYnZwg4LUo
      4+rDvsuNr27RLDZJnb1ALOC8Gef1qSiKgiq5+8qlGgwHKNYbqIHg9v/s0H7h9tfULYVquc4H
      33uvj2bk8zmwAFS/n+lTZ/DKMqlUDE0Lohs2HpeNbruoViqMj09gyzsCcPswuy0UNYBkm4yP
      yHgDIdqNGv6Qtjs3aB95Ol9mblDbtml3d8frDJ18iz85eRnb3j6288T3Pq/yTOFWShtUmhYr
      n/6cYOIUsyfGHP6BNoXMGpulGsNTJ/rIZerl/Q+/y90bD4j51T7sJWRZ2n7yS56+cqmWixWG
      xqdYWsps/9cO7V2Ki169i20Dfdj3mhXu3F9Bcnk4f/4Myj6xbQcWgFf1Mzqy3Rnz7wR+ence
      Kntyg/KM3KDa0ZvRNEyLP/wPf+bI5r/+239ENPT02eFIfJRkdJnvvP9j6k2zj6eXTDQeITE+
      i0/1OLaGFp99fJ30yTQ3P77O937rHYf2ElfefR+j16Xa7G8YNT02QqleJ5rsZxgX2s02/kCY
      RrlBP72I9fk7NCWN5soC6akZkqG9taAYBXpJ/M21RVodffeH0jAbd4sA3FrdPRfw3QvjJLSn
      j+606iXm76+iG/cx8TI6lsajOJGRn3e+9w4BFb5qrjueyIMef//X1zCsGrbi46Pf+tCRNUAs
      MYQhVXC5+1v+GolHyJZaeAL+vsbrh6ZmyM2vEEwMofn2X5EnBPCS+NOf3SZfbh74+OmR6DMF
      4A/FuXTxFNrINL1mzWHh3yYUDFDdKnHixBgWOKyFPMyeHqbRGyYU7K8AX/30M86++RZfXrvB
      xETacRMmlZ4EdxHL7q/7XMxmsNweOoUN6l2DuLK3JhUCOCL85OoC64Xa3i+WdoYwrxd2ffzd
      C+OcmXxW00LnJ//rL6httfngD3+/jyaYzka2Tru9ScEdYjTtPBz7rStvslGu8+aVy32NAH3+
      y79j8sJb3Pz0c5Jjacf3MH7+LUYti25zBsmzfx0iBHBE+PT2Otfu5Q58/Egi9BwBeLj41pvc
      uHYdd1/FTyEUklGCY7hd/aXD+eKL68RSKTILWYZ/9KHjAnzlO7/GnfkFEpPTOB/Dggdf3MAb
      Vbg2n+PD73+P/VpBIhTi2NLi9pfX0V0+5q/P9XWGTreN22XyYH6tL/vTZ04RCPrxRoJ9FbSv
      rt3EbDbJr2fo9mEfSWksLGxy/twU7qckThA1wLHFx4mLF6iXCkQn+lnYJDMyMUUqlcKreLFt
      2/FQ6OKDRZpdE8Xt6aMTDmfPzfCrqzcIxkfoZxxMcVv4E1G2sluMje6/rFTUAMeUWjnLz/7v
      X5Ipt7j6ydU+gvFsNG17O6twyNdHKAZcuHSBi1feYmZymE7PuQc3r8+htzq0NrfoZyC21+5i
      WAa9Thv9KbmjRA1wTAlHR/kX//pf4XK5sCy7j05wj//zp/+bqfPTDI9N9bWvs1cNoRht6uEY
      Sh/jUOevXCYUjrJ0/y56q+s4KLHTNhjyubm1aWBa+88kCAEcE/79f/n5/qNIT+Hf/ME7XDox
      /IwjZGbOnOSNyxfpdvqbCPvi48/oWSZur4f0R993bB8OhdH1Nl5vGMl2XgPFhmN88vFnqNHR
      pwrYsQBs06DZ1Qn41J0wge3PJUl6LOpvp8W3c4AkSViW9eiYb7ZHFbwsqo0OpXr7wMf3ntuk
      sVhfWgXFIBwbZmbS+VxALK7iTU6RToT7amsv373O3EaeRt7FP/3jHzq2D8bT/MMf/x69VpVs
      fpPp8b2CdyyAhbmbVG0/IblHrWMT8sl0TIU3zp9h/vZ1DFcAqVdD9gbQOx28oSgnJ5JcvzVP
      OOSnVGmRHE4zNTbk+IYErxOFc1cuooU8GHJ/+8RVKwZprcJqtsu50yHHneBAJMFFLUZv1tdX
      INzara9ZbhoM+3wEJmf2PcaxAEZGx1i/vUgkGULGRPEFiFg2NjZqUMO2QPLFsHst1MQI6C1s
      XSc+Mo5ZXCQxfha7XcY0zSOTHLcfe9M0d53DaayK9aS9w5h5y7KeuL5Te/OZCX87zTK//MXP
      UAIBzJ7B7//BP8HrsB8wPJ3G65ZoNHXMPpILz998wPDsCI1mk66RdCwCb8jPiXSa5WufEpqc
      3vd+HQug2+kQjkSJRkJIHpNIwEXLdJPLZgmobkwlAN0aLm0cvV7EG0vRsS1oV4hNXaSUWyM5
      OnWkkuPafYyRuFyuXedwvmTyCXuHTUJZlp+4vlN71zMTBAe1JD/+vd/FE4hg6l0CPmcdUL3b
      4qtPP0b3hHHbBtPTU4QddmKnzs4SjYZYyhTxKIrj37iwmKMWbZGcPcWQ5kfe5zd2LIDY8Dix
      nabUw4z5ezPn7yRyfSwbWmB6O8GsdqKfDAmCV81/+8kNbiwcPP3L7753kg/fnHrq926vnz/4
      4z8B2Emz6ewhZVs61z/9hK2eRcClMDQ2yrDmLP9sND3GidOzNAt5dNPCu088lRgFEgCQ26pz
      b6144OPLF8Z3vf/vP73F//jFnQPbf3Rlmn/5j3/tqd9Lspvf/Wf/HNMCbAu32+n+ChZri7f4
      8sFtcpkSH/zgR5yfegmdYIFgP0zLxnDQl3pyXP7T2+v857+4dmD7k+Mx/t0fP2sPa5lLH3zA
      3EqR994OEYqn9j1KCEBwJOjqpqNh3Fpzd3RQsdrizz/eP33M12stYHfzTvUo/NFHF4UABMeD
      SqPDn//y4PmTQn4Pf/TRRRELJBhshAAEA40QgGCgEQIQDDRCAIKBxrkAbIue3s+mbwLB0cPx
      MGhuZYFsw2Q0otIwFTxWm5ahcPrkNMv3734TDerT0JtV1HCSiZEod+/MEU4kKW1skBqfYTih
      vYr7EQgc4VgAXlVFL5UpllqgBHAFfQRlG8u2cXkDyLaN5A9jd+sosRHsbgOz00JLT2Lk7hKZ
      ukK3lsWMBkU06BGKBrVe9PoOF6xYT/yHL1wG+kiQbBiGcwEYhoFhWqRGUmxWWsiWTstSKG5u
      YuttDCWI1Kki+yL0KhuoWoquBfWNVbTULMXV26TGZ0U06BGLBt0vUtLR9R0mKJaf+A9fuAz0
      kbxXURTnAkiNThIdtnArCsnHciX1ej1SqYfxFg/3tPomJfiZ89s5QUdSSceOCgSvCuehEJKM
      W9mrtofJbwWCbxNiGFQw0AgBCAYaIQDBQCMEIBhohAAEA40QgGCgEQIQDDRCAIKBpo9oUPtI
      7/wtEDjB8UxwZTPD0maLN8/OsLKWI+iVaZoKk6ND5DMr30SD+qPo9SKqliIZDbK8cJ9wapRy
      dpXE+CxaHxs3CwQvG8cCaDZbSJJEIZej0Woj4UGyepi2TUe3sXsNJFnGLmUhkKRZKxFTLVzh
      JNXV27iGLlLezBNUR0U0qIgG3eWPEw4tGtTtdlNYzaK545Q2t1ASEXq2m0ijQadZ3Y4G7VaR
      1RC9rSy+cJy2blDMrBHW4hRX5kilx0U0qIgG/ZZGg6Yn+CAxgl9VmT75zefVapXT5y891e7N
      y9s7Gs7sn6VaIDgUnEeDyi786l61PtxPSiD4NiGGQQUDjRCAYKARAhAMNEIAgoFGCEAw0AgB
      CAYaIQDBQCMEIBhohAAEA43jmeBes0qm1CIdD1FrG4RUmY7lIhIK0KxXMGUVSW8he4MYnRoe
      v4bP66a8tYlfi9GoFAnHErj7iN8RCF42jgWwtrpC1x2m21MpFgpU3DJYEA6eILeRx0JBsnWw
      N7BdPuRSnZmxBFu1JvJmBt0Tp9rKMT2R3okEtRxHQtpsRyM+et/H+oQXtX/oe7/YtrXbB+cn
      eMnXd/gf7Ln+i9k7/g/sl1MGHD+GU0PDbGzkaDZqJIdHkCUJSZKwbBtJkpEkkGQZCRtJloHt
      G92O9rORXa59FtW84AKbFzXvSwAvds19zvhCR7/uJUp7rv/CDrzY/feL4xpAlmUmxifweCRq
      tRrDqQRdS6GwscFQMobp8kOvgayGMVoVvKEYPVNH87kJjr5BrZgnmkwjy/KjHcSdhtJKO348
      ei87DUbebS/Lzn9OWZYc737+OJIk774Hh+HMkiQ9Yf96ry8/eX2H4dR7/HdaBiRe6PqwE9Lt
      1CgQSXBiO88t8YefAezaxt63/eIf2nnvxu/3A6AOpxEIjgqiJyoYaIQABAONEIBgoBECEAw0
      QgCCgUYIQDDQCAEIBppXIoDlB3fIbVbZyKxSabTBtsmsLlFvd1ldWqDVFRttC44Gr0QAhc1N
      ZKtL23JTKuQwOzUMJcDm4g0MNcZGLvsqLisQOOaVCCASiZDNbtCsljBx0dMNaqVN8ASobuaQ
      XWJHScHRwHlirAMwNDKGR9VwSQay4gHb4tQJP4pHRe918HjVV3FZgcAxkn1Iuc5N09yJEpVp
      d3VKtfaBbT1uF8lI4JG9bpgUys0D20uyRDoe2hUFmt2qO/J/OB7CJUuPfNgoNRwl2U1E/Hjd
      yiP7YrVFp3fwvlEkqBLweR7Z58tNDOPgOU7jmh/V8831S7U27a5+YHstqBJ87Pq1Zpd6q3tg
      e7/qIRpSH9m3ujrl11gGZFliJB46PAEAj5w/LPuHt95PJOFD+4cRrf1y2L/BoNsfqgAeYlsm
      d+fvc/b0CR7MLTBxeoql+QdoyTR6JYMrPEwpu4I3HEPvtJg+dRa/e/dNr67cJ/qVr+sAAAQ+
      SURBVBKfoLSxjKX4sHstFL9Gr1lhdGKSlcUFJLeK2WkSGppkYii6y75YWEWXYuiNHG3bi8to
      4PJH0RtF/NEhmsUN1HCCZmWTUCLN2HBil32tXKDalvDSplDtEgsqVNs2fsXAUoLQrSL7Y8hG
      DS0+STi4ux/UblTJFuskgm6WMkXGh6MUKm1iITfruS3OnzvD/YVVkhGVYsPg/OnZXfb1SpFy
      U8fvMsgWmyQjKtl8mVgkiI4Hn9SlbXvxST3atodTMxO77LutOmv5CsMRlYW1AkPJCOtrGZIj
      IzRqDU6cnGXu3gJJTSW71eCtyxd3dSAtvcP8UoZT02nuL+WYHkvwYGGVRDxEpthmMh0nl9tg
      5uRZHszd5cKl3faPysCpGe7cniM2PMpmdpmR8Sm2NnJE43EKm2UmxodYzxQ4deYsnidS1K4s
      3yeWnKS0tkR8doqNpSXcgTDdagVVi9Js1Dk1Nca9hQXiI9OkosGjMQ8gyS4iWhgkFzEtiC17
      iEY1JL1Jrd7EVALE4gniIRXbbFHY3FvVxRNxTN0mEPDRM238Pg+6YRGPhpEUP8lYhLHJGeLx
      GMlYeK99Ko7ZM7BdXlSXjWXZFPJ5TMOk16uhBkcwew263R6d7t6qPhyNI9sWHQOGAh5qlgvN
      56Krm/T0HqZpous94sk4Rm9vU8UX1FAVmWqzy+xQlAeZHJbeRkuOEo/FyK2vYlgmYS1KOBjY
      Yx+KxHBh0epZjIZUQsPjxOMxZCwKhTy2S8XrsgkE/ei6vmdBidcfwudxUWm0mR0dwhXQSKSG
      cBkdut0OK8vLmJbFcHqUZCK+p+DIbpVwwIfL7SMc8OJRA2haCCyQ0fH4goRDYQqZZXRTwrJ2
      eyDJLrRwGKNRITZxgk59C8uQsFGIaBr1UgnJZbO+vI6JRbuz9z+IJ2KYukU8omFKLgKqB92A
      WDxCMBgkHAwge1SimobqcW/7vecsh4BtmRRyGbK5POu5LPn1FVbWC5jI+Px+JEtH8fgIBgLY
      qAylgnvOsbG+zsZmgVq9gWybNFpdZNlkfS3DZrGIKXkIemUkxYvPvTe79cZ6jvxmHsvo0DYg
      4PeRSCRQfT5M0027nkVyq7jdXhTXXvvSZp5MJossW2w0ugQxqLQNgn4V0zDwqj5MwyS3vk5+
      a3OPfbNaJJPJ4pIlFvIlZtIj2JZFq1YmkkoTCoWRLIuVlSU63d6eAlwp5slkNnDJNuu1NtRL
      xIfS+H0+kokkttGma1jUqo1991No18tkMhlkWeZBZgOfbBPUYrjcbtweN4FgCNmyqFarJFKp
      PfZGt0U2s04+n2c9k2FpcYGtSh1b8eK2LXLra1SbbVR/EEW2MJ8QgGUaFDbW2WyZFFfv4/Vp
      eP1e6uUCuc0SWjwOtoUWT+Cy7T0CelgG8lub5Ao5NtYy1NtdXHRYWsrQabfYyGZYW15kvVDB
      MLf7W/8fyELT9cYX4wAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Total Per Pound Delivery Cost' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
